# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "aphorme/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  cargoUnstableFlags ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
  ignoreLockHash,
}:
let
  nixifiedLockHash = "95c180ceb22e703dab9936e1c6b1c8d206940c883c855f2433006b93528b41dc";
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
  currentLockHash = builtins.hashFile "sha256" (workspaceSrc + /Cargo.lock);
  lockHashIgnored = if ignoreLockHash
                  then builtins.trace "Ignoring lock hash" ignoreLockHash
                  else ignoreLockHash;
in if !lockHashIgnored && (nixifiedLockHash != currentLockHash) then
  throw ("Cargo.nix ${nixifiedLockHash} is out of sync with Cargo.lock ${currentLockHash}")
else let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts cargoUnstableFlags rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    aphorme = rustPackages.unknown.aphorme."0.1.16";
  };
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.23" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph";
    version = "0.2.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "80179d7dd5d7e8c285d67c4a1e652972a92de7475beddfb92028c76463b13225"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "variable-fonts")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "ab_glyph_rasterizer" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "owned_ttf_parser" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.20.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph_rasterizer";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c71b1793ee61086797f5c80b6efa2b8ffa6d5dd703f118545808a7f2e27f7046"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "accesskit";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "76eb1adf08c5bcaa8490b9851fd53cca27fa9880076f178ea9d29f05196728a8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "enumn")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "enumn" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enumn."0.1.13" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit_consumer."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "accesskit_consumer";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "04bb4d9e4772fe0d47df57d0d5dbe5d85dd05e2f37ae1ddb6b105e76be58fb00"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit_macos."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "accesskit_macos";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "134d0acf6acb667c89d3332999b1a5df4edbc8d6113910f392ebb73f2b03bb56"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit_consumer" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_consumer."0.15.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "objc2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc2."0.3.0-beta.3.patch-leaks.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit_unix."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "accesskit_unix";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e084cb5168790c0c112626175412dc5ad127083441a8248ae49ddf6725519e83"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "async-io")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit_consumer" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_consumer."0.15.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_channel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "atspi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atspi."0.10.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zbus" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zbus."3.15.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit_windows."0.14.3" = overridableMkRustCrate (profileName: rec {
    name = "accesskit_windows";
    version = "0.14.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9eac0a7f2d7cd7a93b938af401d3d8e8b7094217989a7c25c55a953023436e31"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit_consumer" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_consumer."0.15.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "arrayvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "paste" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "windows" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit_winit."0.14.4" = overridableMkRustCrate (profileName: rec {
    name = "accesskit_winit";
    version = "0.14.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "825d23acee1bd6d25cbaa3ca6ed6e73faf24122a774ec33d52c5c86c6ab423c0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "accesskit_unix")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "async-io")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "accesskit_macos" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_macos."0.9.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "accesskit_unix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_unix."0.5.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "windows" then "accesskit_windows" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_windows."0.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "winit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.28.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "gimli" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.28.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.4.8" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.4.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0453232ace82dee0dd0b4c87a59bd90f7b53b314f3e0f61fe2ee7c8a16482289"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.9" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.8.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d713b3834d76b85304d4d525563c1276e2e30dc97cc67bfb4585a4a29fc2c89f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "no-rng")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "serde")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "zerocopy" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.32" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "version_check" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0"; };
    features = builtins.concatLists [
      [ "perf-literal" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".allocator-api2."0.2.16" = overridableMkRustCrate (profileName: rec {
    name = "allocator-api2";
    version = "0.2.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0942ffc6dcaadf03badf6e6a2d0228460359d5e34b57ccdc720b7382dfbd5ec5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "alloc")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android-activity."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "android-activity";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "64529721f27c2314ced0890ce45e469574a73e5e6fdd6e9da1860eb29285f5e0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "android_properties" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android-properties."0.2.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "jni_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "ndk" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "ndk_context" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "ndk_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "num_enum" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.6.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.88" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android-properties."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "android-properties";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fc7eb209b1518d6bb87b283c20095f5228ecda460da70b44f0802523dea6da04"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "android_system_properties";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.12" = overridableMkRustCrate (profileName: rec {
    name = "anstream";
    version = "0.6.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96b09b5178381e0874812a9b157f7fe84982617e48f71f4e3235482775e5b540"; };
    features = builtins.concatLists [
      [ "auto" ]
      [ "default" ]
      [ "wincon" ]
    ];
    dependencies = {
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.6" { inherit profileName; }).out;
      anstyle_parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.3" { inherit profileName; }).out;
      anstyle_query = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.0.2" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "anstyle_wincon" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.2" { inherit profileName; }).out;
      colorchoice = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.0" { inherit profileName; }).out;
      utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "anstyle";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8901269c6307e8d93993578286ac0edf7f195079ffff5ebdeea6a59ffb7e36bc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-parse";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c75ac65da39e5fe5ab759307499ddad880d724eed2f6ce5b5e8a26f4f387928c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "utf8" ]
    ];
    dependencies = {
      utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-query";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e28923312444cdd728e4738b3f9c9cac739500909bb3d3c94b43551b16517648"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.2" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-wincon";
    version = "3.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1cd54b81ec8d6180e24654d0b371ad22fc3dd083b6ff8ba325b72e00c87660a7"; };
    dependencies = {
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.6" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".aphorme."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "aphorme";
    version = "0.1.16";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "egui-ui")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "iced-ui")
    ];
    dependencies = {
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.1" { inherit profileName; }).out;
      confy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".confy."0.5.1" { inherit profileName; }).out;
      dirs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs."5.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "eframe" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".eframe."0.23.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "egui_extras" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".egui_extras."0.23.0" { inherit profileName; }).out;
      env_logger = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.10.2" { inherit profileName; }).out;
      freedesktop_entry_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".freedesktop_entry_parser."1.3.0" { inherit profileName; }).out;
      fuzzy_matcher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuzzy-matcher."0.3.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced."0.9.0" { inherit profileName; }).out;
      image = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".image."0.24.9" { inherit profileName; }).out;
      linicon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linicon."2.3.0" { inherit profileName; }).out;
      linicon_theme = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linicon-theme."1.2.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.114" { inherit profileName; }).out;
      single_instance = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".single-instance."0.3.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.18" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arboard."3.3.1" = overridableMkRustCrate (profileName: rec {
    name = "arboard";
    version = "3.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1faa3c733d9a3dd6fbaf85da5d162a2e03b2e0033a90dceb0e2a90fdd1e5380a"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "clipboard_win" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clipboard-win."5.2.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "emscripten") || hostPlatform.isWindows) then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "objc_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-foundation."0.1.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "objc_id" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "emscripten") then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "emscripten") then "x11rb" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11rb."0.13.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "arrayref";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6b4930d2cb77ce62f89ee5d5289b4ac049559b1c45539271f5ed4fdc7db34545"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ash."0.37.3+1.3.251" = overridableMkRustCrate (profileName: rec {
    name = "ash";
    version = "0.37.3+1.3.251";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39e9c3835d686b0a6084ab4234fcd1b07dbf6e4767dce60874b12356a25ecd4a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "debug")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "libloading")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "loaded")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libloading" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-broadcast."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "async-broadcast";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c48ccdbf6ca6b121e0f586cbc0e73ae440e56c67c30fa0873b4e110d9c26d2b"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-channel."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "async-channel";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "81953c529336010edd6d8e358f886d9581267795c61b19475b71314bffa46d35"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-channel."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "async-channel";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f28243a43d821d11341ab73c80bed182dc015c514b951616cf79bd4af39af0c3"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."5.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener_strategy" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener-strategy."0.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-executor."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "async-executor";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17ae5ebefcc48e7452b4987947920dac9450be1110cadf34d1b8c116bdbaf97c"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_lock" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."3.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_task" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-task."4.7.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "fastrand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "slab" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-fs."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "async-fs";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "279cf904654eeebfa37ac9bb1598880884924aab82e290aa65c9e77a0e142e06"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_lock" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."2.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "blocking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blocking."1.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "autocfg" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-io."1.13.0" = overridableMkRustCrate (profileName: rec {
    name = "async-io";
    version = "1.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0fc5b45d93ef0529756f812ca52e44c221b35341892d3dcc34132ac02f3dd2af"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_lock" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."2.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "parking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "polling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".polling."2.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.37.27" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "slab" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "socket2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.10" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "waker_fn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "autocfg" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-io."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "async-io";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f97ab0c5b00a7cdbe5a371b9a782ee7be1316095885c8a4ea1daf490eb0ef65"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_lock" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."3.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "parking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "polling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".polling."3.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "slab" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-lock."2.8.0" = overridableMkRustCrate (profileName: rec {
    name = "async-lock";
    version = "2.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "287272293e9d8c41773cec55e365490fe034813a2f172f502d6ddcf75b2f582b"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-lock."3.3.0" = overridableMkRustCrate (profileName: rec {
    name = "async-lock";
    version = "3.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d034b430882f8381900d3fe6f0aaa3ad94f2cb4ac519b429692a1bc2dda4ae7b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."4.0.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener_strategy" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener-strategy."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-process."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "async-process";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea6438ba0a08d81529c69b36700fa2f95837bfe3e776ab39cde9c14d9149da88"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "async_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.13.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_lock" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."2.8.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "async_signal" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-signal."0.2.5" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "blocking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blocking."1.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."3.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-recursion."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "async-recursion";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5fd55a5ba1179988837d24ab4c7cc8ed6efdeff578ede0416b4225a5fca35bd0"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-signal."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "async-signal";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e47d90f65a225c4527103a8d747001fc56e375203592b25ad103e1ca13124c5"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "async_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."2.3.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "async_lock" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."2.8.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "atomic_waker" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "futures_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "signal_hook_registry" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "slab" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-task."4.7.0" = overridableMkRustCrate (profileName: rec {
    name = "async-task";
    version = "4.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fbb36e985947064623dbd357f727af08ffd077f93d696782f3c56365fa2e2799"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.77" = overridableMkRustCrate (profileName: rec {
    name = "async-trait";
    version = "0.1.77";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c980ee35e870bd1a4d2c8294d4c04d0499e67bca1e4b5cefcc693c2fa00caea9"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "atomic-waker";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atspi."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "atspi";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "674e7a3376837b2e7d12d34d58ac47073c491dc3bf6f71a7adaf687d4d817faa"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_recursion" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-recursion."1.0.5" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.77" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "atspi_macros" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".atspi-macros."0.2.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "enumflags2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".enumflags2."0.7.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zbus" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zbus."3.15.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zbus_names" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zbus_names."2.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atspi-macros."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "atspi-macros";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97fb4870a32c0eaa17e35bca0e6b16020635157121fb7d45593d242c295bc768"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.69" = overridableMkRustCrate (profileName: rec {
    name = "backtrace";
    version = "0.3.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2089b7e3f35b9dd2d0ed921ead4f6d318c27680d4a5bd167b3ee120edb105837"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "addr2line" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.21.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "miniz_oxide" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "object" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.32.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustc_demangle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.23" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.88" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-set";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bit_vec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-vec";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit_field."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "bit_field";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc827186963e592360843fb5ba4b973e145841266c1357f7180c43526f2e5b61"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "2.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed570934406eb16438a4e976b1b4500774099c13b8cb96eec99f620f05090ddf"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "block";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.10.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "generic_array" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-sys."0.1.0-beta.1" = overridableMkRustCrate (profileName: rec {
    name = "block-sys";
    version = "0.1.0-beta.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0fa55741ee90902547802152aaf3f8e5248aab7e21468089560d4c8840561146"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "apple")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "objc_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-sys."0.2.0-beta.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block2."0.2.0-alpha.6" = overridableMkRustCrate (profileName: rec {
    name = "block2";
    version = "0.2.0-alpha.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8dd9e63c1744f755c2f60332b88de39d341e5e86239014ad839bd71c106dec42"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "apple")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "block_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-sys."0.1.0-beta.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "objc2_encode" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc2-encode."2.0.0-pre.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blocking."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "blocking";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a37913e8dc4ddcc604f0c6d3bf2887c995153af3611de9e23c352b44c1b9118"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_channel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_lock" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."3.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_task" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-task."4.7.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "fastrand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "piper" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".piper."0.2.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.15.3" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.15.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ea184aa71bb362a1157c896979544cc23974e08fd265f29ea96b59f0b4a555b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck";
    version = "1.14.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2ef034f05691a48569bd920a96c81b9d91bbad1ab5ac7c4616c1f6ef36cb79f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "aarch64_simd")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "bytemuck_derive")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "derive")
      [ "extern_crate_alloc" ]
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bytemuck_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck_derive."1.5.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck_derive."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck_derive";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "965ab7eb5f8f97d2a083c799f3a1b994fc397b2fe2da5d1da1626ce15a39f2b1"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2bd12c1caf447e69cd4528f47f94d203fd2582878ecb9e9465484c4148a8223"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".calloop."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "calloop";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52e0d00eb1ea24371a97d2da6201c6747a633dc6dc1988ef503403b4c59504a8"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "nix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.25.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "slotmap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "vec_map" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".calloop."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "calloop";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fba7adb4dd5aa98e5553510223000e7148f621165ec5f9acd7113f6ca4995298"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "polling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".polling."3.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "slab" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".calloop-wayland-source."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "calloop-wayland-source";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0f0ea9b9476c7fad82841a8dbb380e2eae480c21910feba80725b46931ed8f02"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "calloop" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".calloop."0.12.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_backend" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.3.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.31.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.88" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.88";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "02f341c093d19155a6e41631ce5971aac4e9a868262212153124c15fa22d1cdc"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "libc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "parallel")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cesu8";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "cfg_aliases";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cgl."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "cgl";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ced0551234e87afee12411d535648dd89d2e7f34c78b753395567aff3d447ff"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap."4.5.1" = overridableMkRustCrate (profileName: rec {
    name = "clap";
    version = "4.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c918d541ef2913577a0f9566e9ce27cb35b6df072075769e0b26cb5a554520da"; };
    features = builtins.concatLists [
      [ "color" ]
      [ "default" ]
      [ "derive" ]
      [ "error-context" ]
      [ "help" ]
      [ "std" ]
      [ "suggestions" ]
      [ "usage" ]
    ];
    dependencies = {
      clap_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.1" { inherit profileName; }).out;
      clap_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.1" = overridableMkRustCrate (profileName: rec {
    name = "clap_builder";
    version = "4.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f3e7391dad68afb0c2ede1bf619f579a3dc9c2ec67f089baa397123a2f3d1eb"; };
    features = builtins.concatLists [
      [ "color" ]
      [ "error-context" ]
      [ "help" ]
      [ "std" ]
      [ "suggestions" ]
      [ "usage" ]
    ];
    dependencies = {
      anstream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.12" { inherit profileName; }).out;
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.6" { inherit profileName; }).out;
      clap_lex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.0" { inherit profileName; }).out;
      strsim = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.0" = overridableMkRustCrate (profileName: rec {
    name = "clap_derive";
    version = "4.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "307bc0538d5f0f83b8248db3087aa92fe504e4691294d0c96c0eabc33f47ba47"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "clap_lex";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "98cc8fbded0c607b7ba9dd60cd98df59af97e84d24e49c8557331cfc26d301ce"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clipboard-win."4.5.0" = overridableMkRustCrate (profileName: rec {
    name = "clipboard-win";
    version = "4.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7191c27c2357d9b7ef96baac1773290d4ca63b24205b82a3fd8a0637afcf0362"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "error_code" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".error-code."2.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "str_buf" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".str-buf."1.0.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clipboard-win."5.2.0" = overridableMkRustCrate (profileName: rec {
    name = "clipboard-win";
    version = "5.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12f9a0700e0127ba15d1d52dd742097f821cd9c65939303a44d970465040a297"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "error_code" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".error-code."3.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clipboard_macos."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "clipboard_macos";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "145a7f9e9b89453bc0a5e32d166456405d389cea5b578f57f1274b1397588a95"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "objc_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-foundation."0.1.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "objc_id" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clipboard_wayland."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "clipboard_wayland";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "003f886bc4e2987729d10c1db3424e7f80809f3fc22dbc16c685738887cb37b8"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "smithay_clipboard" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-clipboard."0.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clipboard_x11."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "clipboard_x11";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4274ea815e013e0f9f04a2633423e14194e408a0576c943ce3d14ca56c50031c"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "x11rb" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11rb."0.13.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.50" = overridableMkRustCrate (profileName: rec {
    name = "cmake";
    version = "0.1.50";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a31c789563b815f77f4250caee12365734369f942439b7defd71e18a48197130"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.88" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "cocoa";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f425db7937052c684daec3bd6375c8abe2d146dca4b8b143d6db777c39138f3a"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "block" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "cocoa_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "core_graphics" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "foreign_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "cocoa";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6140449f97a6e97f9511815c5632d84c8aacf8ac271ad77c559218161a1373c"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "block" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cocoa_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "core_graphics" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.23.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "foreign_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "cocoa-foundation";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c6234cbb2e4c785b456c0644748b1ac416dd045799740356f8363dfe00c93f7"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "block" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "core_graphics_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "codespan-reporting";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "termcolor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.4.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "unicode_width" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "color_quant";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "colorchoice";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".com-rs."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "com-rs";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bf43edc576402991846b093a7ca18a3477e0ef9c588cde84964b5d3e43016642"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".combine."4.6.6" = overridableMkRustCrate (profileName: rec {
    name = "combine";
    version = "4.6.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "35ed6e9d84f0b51a7f52daf1c7d71dd136fd7a3f41a8462b8cdb8c78d920fad4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "bytes")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" = overridableMkRustCrate (profileName: rec {
    name = "concurrent-queue";
    version = "2.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d16048cd947b08fa32c24458a22f5dc5e835264f689f4f5653210c69fd107363"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "crossbeam_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".confy."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "confy";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e37668cb35145dcfaa1931a5f37fde375eeae8068b4c0d2f289da28a270b2d2c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "toml" ]
      [ "toml_conf" ]
    ];
    dependencies = {
      directories = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".directories."4.0.1" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const_panic."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "const_panic";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6051f239ecec86fde3410901ab7860d458d160371533842974fc61f96d15879b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "link")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "core_foundation_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "link")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.22.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2581bbab3b8ffc6fcbd550bf46c355135d16e9ff2a6ea032ad6b9bf1d7efe4fb"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "core_graphics_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "foreign_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.23.1" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.23.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "970a29baf4110c26fedbc7f82107d42c23f7e88e404c4577ed73fe99ff85a212"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "core_graphics_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "foreign_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics-types";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "link")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-text."20.1.0" = overridableMkRustCrate (profileName: rec {
    name = "core-text";
    version = "20.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c9d2790b5c08465d49f8dc05c8bcae9fea467855947db39b0f8145c091aaced5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "mountainlion")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "core_graphics" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.23.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "foreign_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.12" = overridableMkRustCrate (profileName: rec {
    name = "cpufeatures";
    version = "0.2.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.config == "aarch64-linux-android" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.vendor.name == "apple" || hostPlatform.parsed.cpu.name == "loongarch64" && hostPlatform.parsed.kernel.name == "linux") then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3855a8a784b474f333699ef2bbca9db2c4a1f6d9088a90a2d25b1eb53111eaa"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.11" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "176dc175b78f56c0f321911d9c8eb2b77a78a4860b9c19db83835fea1a46649b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "crossbeam_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-deque";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crossbeam_epoch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" { inherit profileName; }).out;
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-epoch";
    version = "0.9.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.19" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "248e3bacc7dc6baa3b21e405ee045c3047101a49145e7e9eca583ab4c2ca5345"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossfont."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "crossfont";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3eb5a3822b594afc99b503cc1859b94686d3c3efdd60507a28587dab80ee1071"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "force_system_fontconfig")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "cocoa" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa."0.25.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "core_foundation_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "core_graphics" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.23.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "core_text" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-text."20.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "dwrote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dwrote."0.11.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "foreign_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.isWindows) then "freetype" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".freetype-rs."0.26.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.isWindows) then "fontconfig" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".servo-fontconfig."0.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.isWindows) then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "crunchy";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "limit_128" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "crypto-common";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "generic_array" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "typenum" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cty."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "cty";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cursor-icon."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cursor-icon";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96a6ac251f4a2aca6b3f91340350eab87ae57c3f127ffeb585e92bd336717991"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".d3d12."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "d3d12";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d8f0de2f5a8e7bd4a9eec0e3c781992a4ce1724f68aec7d7a3715344de8b39da"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "libloading")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libloading" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a01d95850c592940db9b8194bc39f4bc0e89dee5c4265e4b1807c34a9aba453c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "suggestions")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "darling_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "darling_macro" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.13.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "859d65a907b6852c9361e3185c862aae7fafd2887876799fa55f5f99dc40d610"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "strsim")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "suggestions")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "fnv" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ident_case" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "strsim" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c972679f83bdf9c42bd905396b6c3588a843a17f0f16dfcfa3e2c5d57441835"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "darling_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".data-url."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "data-url";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d7439c3735f405729d52c3fbbe4de140eaf938a1fe47d227c27f8254d4302a5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "derivative";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.10.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "block-buffer")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "core-api")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "block_buffer" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "crypto_common" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".directories."4.0.1" = overridableMkRustCrate (profileName: rec {
    name = "directories";
    version = "4.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f51c5d4ddabd36886dd3e1438cb358cdcb0d7c499cb99cb4ac2e38e18b5cb210"; };
    dependencies = {
      dirs_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs."5.0.1" = overridableMkRustCrate (profileName: rec {
    name = "dirs";
    version = "5.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225"; };
    dependencies = {
      dirs_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.4" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      option_ext = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".option-ext."0.2.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.4" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "dispatch";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "dlib";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "330c60081dcc4c72131f8eb70510f1ac07223e5d4163db481a04a0befcffa412"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libloading" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlv-list."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "dlv-list";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68df3f2b690c1b86e65ef7830956aededf3cb0a16f898f79b9a6f421a7b6211b"; };
    dependencies = {
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "downcast-rs";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dwrote."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "dwrote";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "439a1c2ba5611ad3ed731280541d36d2e9c4ac5e7fb818a27b604bdc5a6aa65b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "serde")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "serde_derive")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "serde_serialization")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "serde_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.197" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wio."0.2.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ecolor."0.23.0" = overridableMkRustCrate (profileName: rec {
    name = "ecolor";
    version = "0.23.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cfdf4e52dbbb615cfd30cf5a5265335c217b5fd8d669593cea74a517d9c605af"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "bytemuck")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".eframe."0.23.0" = overridableMkRustCrate (profileName: rec {
    name = "eframe";
    version = "0.23.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26d9efede6c8905d3fc51a5ec9a506d4da4011bbcae0253d0304580fe40af3f5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "accesskit")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default_fonts")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "glow")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "x11")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "cocoa" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "egui" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".egui."0.23.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !(hostPlatform.parsed.cpu.name == "wasm32") then "egui_winit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".egui-winit."0.23.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "egui_glow" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".egui_glow."0.23.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "glow" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glow."0.12.3" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !(hostPlatform.parsed.cpu.name == "wasm32") then "glutin" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glutin."0.30.10" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !(hostPlatform.parsed.cpu.name == "wasm32") then "glutin_winit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glutin-winit."0.3.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !(hostPlatform.parsed.cpu.name == "wasm32") then "image" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".image."0.24.9" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !(hostPlatform.parsed.cpu.name == "wasm32") then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.41" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !(hostPlatform.parsed.cpu.name == "wasm32") then "winit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.28.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".egui."0.23.0" = overridableMkRustCrate (profileName: rec {
    name = "egui";
    version = "0.23.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8bd69fed5fcf4fbb8225b24e80ea6193b61e17a625db105ef0c4d71dde6eb8b7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "accesskit")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "bytemuck")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default_fonts")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "log")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "ahash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "epaint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".epaint."0.23.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "nohash_hasher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".egui-winit."0.23.0" = overridableMkRustCrate (profileName: rec {
    name = "egui-winit";
    version = "0.23.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c15479a96d9fadccf5dac690bdc6373b97b8e1c0dd28367058f25a5298da0195"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "accesskit")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "accesskit_winit")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "arboard")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "clipboard")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "links")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "smithay-clipboard")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "webbrowser")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "x11")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "accesskit_winit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_winit."0.14.4" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !(hostPlatform.parsed.kernel.name == "android") then "arboard" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arboard."3.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "egui" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".egui."0.23.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd") then "smithay_clipboard" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-clipboard."0.6.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "web_time" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-time."0.2.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "webbrowser" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webbrowser."0.8.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "winit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.28.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".egui_extras."0.23.0" = overridableMkRustCrate (profileName: rec {
    name = "egui_extras";
    version = "0.23.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68ffe3fe5c00295f91c2a61a74ee271c32f74049c94ba0b1cea8f26eb478bc07"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "image")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "resvg")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "svg")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "tiny-skia")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "usvg")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "egui" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".egui."0.23.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "enum_map" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-map."2.7.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "image" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".image."0.24.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "mime_guess" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime_guess."2.0.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "resvg" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".resvg."0.28.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tiny_skia" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-skia."0.8.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "usvg" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".usvg."0.28.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".egui_glow."0.23.0" = overridableMkRustCrate (profileName: rec {
    name = "egui_glow";
    version = "0.23.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce6726c08798822280038bbad2e32f4fc3cbed800cd51c6e34e99cd2d60cc1bc"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "egui" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".egui."0.23.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "glow" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glow."0.12.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "memoffset" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".either."1.10.0" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11157ac094ffbdde99aa67b23417ebdd801842852b500e395a45a9c0aac03e4a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".emath."0.23.0" = overridableMkRustCrate (profileName: rec {
    name = "emath";
    version = "0.23.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ef2b29de53074e575c18b694167ccbe6e5191f7b25fe65175a0d905a32eeec0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "bytemuck")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encase."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "encase";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0a516181e9a36e8982cb37933c5e7dba638c42938cacde46ee4e5b4156f881b9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "glam")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "const_panic" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const_panic."0.2.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "encase_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".encase_derive."0.3.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "glam" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.21.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encase_derive."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "encase_derive";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f5b802412eea315f29f2bb2da3a5963cd6121f56eaa06aebcdc0c54eea578f22"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "encase_derive_impl" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".encase_derive_impl."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encase_derive_impl."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "encase_derive_impl";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0f2f4de457d974f548d2c2a16f709ebd81013579e543bd1a9b19ced88132c2cf"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-map."2.7.3" = overridableMkRustCrate (profileName: rec {
    name = "enum-map";
    version = "2.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6866f3bfdf8207509a033af1a75a7b08abda06bbaaeae6669323fd5a097df2e9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "enum_map_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-map-derive."0.17.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-map-derive."0.17.0" = overridableMkRustCrate (profileName: rec {
    name = "enum-map-derive";
    version = "0.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f282cfdfe92516eb26c2af8589c274c7c17681f5ecc03c18255fe741c6aa64eb"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enumflags2."0.7.9" = overridableMkRustCrate (profileName: rec {
    name = "enumflags2";
    version = "0.7.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3278c9d5fb675e0a51dabcf4c0d355f692b064171535ba72361be1528a9d8e8d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "enumflags2_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enumflags2_derive."0.7.9" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enumflags2_derive."0.7.9" = overridableMkRustCrate (profileName: rec {
    name = "enumflags2_derive";
    version = "0.7.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c785274071b1b420972453b306eeca06acf4633829db4223b58a2a8c5953bc4"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enumn."0.1.13" = overridableMkRustCrate (profileName: rec {
    name = "enumn";
    version = "0.1.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fd000fd6988e73bbe993ea3db9b1aa64906ab88766d654973924340c8cddb42"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4cd405aab171cb85d6735e5c8d9db038c17d3ca007a4d2c25f337935c3d90580"; };
    features = builtins.concatLists [
      [ "auto-color" ]
      [ "color" ]
      [ "default" ]
      [ "humantime" ]
      [ "regex" ]
    ];
    dependencies = {
      humantime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" { inherit profileName; }).out;
      is_terminal = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".is-terminal."0.4.12" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.3" { inherit profileName; }).out;
      termcolor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".epaint."0.23.0" = overridableMkRustCrate (profileName: rec {
    name = "epaint";
    version = "0.23.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58067b840d009143934d91d8dcb8ded054d8301d7c11a517ace0a99bb1e1595e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "bytemuck")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default_fonts")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "log")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "ab_glyph" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.23" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "ahash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "ecolor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecolor."0.23.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "emath" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".emath."0.23.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "nohash_hasher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "equivalent";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "errno";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "hermit" || hostPlatform.parsed.kernel.name == "wasi") then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".error-code."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "error-code";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "64f18991e7bf11e7ffee451b5318b5c1a73c52d0d0ada6e5a3017c8c1ced6a21"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "str_buf" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".str-buf."1.0.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".error-code."3.1.0" = overridableMkRustCrate (profileName: rec {
    name = "error-code";
    version = "3.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26a147e1a6641a55d994b3e4e9fa4d9b180c8d652c09b363af8c9bf1b8e04139"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".euclid."0.22.9" = overridableMkRustCrate (profileName: rec {
    name = "euclid";
    version = "0.22.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87f253bc5c813ca05792837a0ff4b3a580336b224512d48f7eda1d7dd9210787"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.18" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" = overridableMkRustCrate (profileName: rec {
    name = "event-listener";
    version = "2.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0206175f82b8d6bf6652ff7d71a1e27fd2e4efde587fd368662814d6ec1d9ce0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener."3.1.0" = overridableMkRustCrate (profileName: rec {
    name = "event-listener";
    version = "3.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d93877bcde0eb80ca09131a08d23f0a5c18a620b01db137dba666d18cd9b30c2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "parking")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "parking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener."4.0.3" = overridableMkRustCrate (profileName: rec {
    name = "event-listener";
    version = "4.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67b215c49b2b248c855fb73579eb1f4f26c38ffdc12973e20e07b91d78d5646e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "parking")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "parking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener."5.1.0" = overridableMkRustCrate (profileName: rec {
    name = "event-listener";
    version = "5.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b7ad6fd685ce13acd6d9541a30f6db6567a7a24c9ffd4ba2955d29e3f22c8b27"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "parking")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "parking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener-strategy."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "event-listener-strategy";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "958e4d70b6d5e81971bebec42271ec641e7ff4e170a6fa605f2b8a8b65cb97d3"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."4.0.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener-strategy."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "event-listener-strategy";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "feedafcaa9b749175d5ac357452a9d41ea2911da598fde46ce1fe02c37751291"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."5.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".expat-sys."2.1.6" = overridableMkRustCrate (profileName: rec {
    name = "expat-sys";
    version = "2.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "658f19728920138342f68408b7cf7644d90d4784353d8ebc32e7e8663dbe45fa"; };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cmake" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.50" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".exr."1.72.0" = overridableMkRustCrate (profileName: rec {
    name = "exr";
    version = "1.72.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "887d93f60543e9a9362ef8a21beedd0a833c5d9610e18c67abe15a5963dcb1a4"; };
    dependencies = {
      bit_field = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit_field."0.10.2" { inherit profileName; }).out;
      flume = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flume."0.11.0" { inherit profileName; }).out;
      half = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".half."2.4.0" { inherit profileName; }).out;
      lebe = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lebe."0.5.2" { inherit profileName; }).out;
      miniz_oxide = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.2" { inherit profileName; }).out;
      rayon_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.1" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.1" { inherit profileName; }).out;
      zune_inflate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zune-inflate."0.2.54" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "wasi") then "instant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "2.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "25cbce373ec4653f1a01a31e8a5e5ec0c622dc27ff9c4e6606eefef5cbbed4a5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fdeflate."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "fdeflate";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4f9bfee30e4dedf0ab8b422f03af778d9612b63f502710fc500a334ebe2de645"; };
    dependencies = {
      simd_adler32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".file-locker."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "file-locker";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e91c8a37357ab5d51f1a8053900fe8374283449695c5418b66f45deece50705f"; };
    dependencies = {
      nix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.25.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "find-crate";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59a98bbaacea1c0eb6a0876280051b892eb73594fd90cf3b20e9c817029c57d2"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "toml" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.28" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46303f565772937ffe1d394a4fac6f411c6013172fadde9dcdb1e147a086940e"; };
    features = builtins.concatLists [
      [ "any_impl" ]
      [ "default" ]
      [ "miniz_oxide" ]
      [ "rust_backend" ]
    ];
    dependencies = {
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.0" { inherit profileName; }).out;
      miniz_oxide = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".float-cmp."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "float-cmp";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "98de4bbd547a563b716d8dfa9aad1cb19bfab00f4fa09a6a4ed21dbcf44ce9c4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flume."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "flume";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "55ac459de2512911e4b674ce33cf20befaba382d05b62b008afc1c8b57cbf181"; };
    dependencies = {
      spin1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "foreign_types_shared" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d737d9aa519fb7b749cbc3b962edcf310a8dd1f4b67c91c4f83975dbdd17d965"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "foreign_types_macros" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-macros."0.2.3" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "foreign_types_shared" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-macros."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-macros";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a5c6c585bc94aaf2c7b51dd4c2ba22680844aba4c687be581871a6f518c5742"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa9a19cbb55df58761df49b23516a86d432839add4af60fc256da840f66ed35b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "form_urlencoded";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".freedesktop_entry_parser."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "freedesktop_entry_parser";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "db9c27b72f19a99a895f8ca89e2d26e4ef31013376e56fdafef697627306c3e4"; };
    dependencies = {
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".freetype-rs."0.26.0" = overridableMkRustCrate (profileName: rec {
    name = "freetype-rs";
    version = "0.26.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "74eadec9d0a5c28c54bb9882e54787275152a4e36ce206b45d7451384e5bf5fb"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "freetype_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".freetype-sys."0.13.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".freetype-sys."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "freetype-sys";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a37d4011c0cc628dfa766fcc195454f4b068d7afdc2adfd28861191d866e731a"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cmake" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.50" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "645c6916888f6cb6350d2550b80fb63e734897a8498abe35cfb732b6487804b0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "async-await")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "executor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "futures-executor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "thread-pool")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_channel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_executor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_sink" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_task" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-channel";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "futures-sink")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "sink")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_sink" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-executor";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "num_cpus")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "thread-pool")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_task" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "num_cpus" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" = overridableMkRustCrate (profileName: rec {
    name = "futures-lite";
    version = "1.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49a9d51ce47660b1e808d3c990b4709f2f415d928835a17dfd16991515c46bce"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "fastrand")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "futures-io")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "memchr")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "parking")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "waker-fn")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "fastrand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "parking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "waker_fn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-lite."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "futures-lite";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "445ba825b27408685aaecefd65178908c36c6e96aaf6d8599419d46e624192ba"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "fastrand")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "futures-io")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "parking")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "fastrand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "parking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-macro";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-sink";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-task";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-util";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "async-await")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "async-await-macro")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "channel")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "futures-channel")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "futures-io")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "futures-macro")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "futures-sink")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "io")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "memchr")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "sink")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "slab")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_channel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "futures_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures_macro" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.30" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "futures_sink" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "futures_task" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "pin_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "slab" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fuzzy-matcher."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "fuzzy-matcher";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      thread_local = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "fxhash";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "byteorder" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.14.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "more_lengths")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "typenum" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "version_check" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gethostname."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "gethostname";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.12" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "190092ea657667030ac6a35e305e62fc4dd69fd98ac98631e5d3a2b1575a12b5"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gif."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "gif";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3fb2d69b19215e18bb912fa30f7ce15846e301408695e44e0ef719f1da9e19f2"; };
    features = builtins.concatLists [
      [ "color_quant" ]
      [ "default" ]
      [ "raii_no_panic" ]
      [ "std" ]
    ];
    dependencies = {
      color_quant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" { inherit profileName; }).out;
      weezl = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".weezl."0.1.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.28.1" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.28.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "read")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "read-core")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gl_generator."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "gl_generator";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a95dfc23a2b4a9a2f5ab41d194f8bfda3cabec42af4e39f08c339eb2a0c124d"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "khronos_api" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".khronos_api."3.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "xml" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glam."0.21.3" = overridableMkRustCrate (profileName: rec {
    name = "glam";
    version = "0.21.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "518faa5064866338b013ff9b2350dc318e14cc4fcd6cb8206d7e7c9886c98815"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glow."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "glow";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca0fe580e4b60a8ab24a868bc08e2f03cbcb20d3d676601fa909386713333728"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "slotmap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.7" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glutin."0.30.10" = overridableMkRustCrate (profileName: rec {
    name = "glutin";
    version = "0.30.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fc93b03242719b8ad39fb26ed2b01737144ce7bd4bfc7adadcef806596760fe"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "egl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "glutin_egl_sys")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "glutin_glx_sys")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "glutin_wgl_sys")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "glx")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "libloading")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland-sys")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wgl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "windows-sys")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "x11")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "x11-dl")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "cgl" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cgl."0.3.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "dispatch" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.isWindows || hostPlatform.parsed.kernel.name == "android") then "glutin_egl_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glutin_egl_sys."0.5.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd") then "glutin_glx_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glutin_glx_sys."0.4.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "glutin_wgl_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glutin_wgl_sys."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "libloading" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "objc2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc2."0.3.0-beta.3.patch-leaks.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd") then "wayland_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.30.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd") then "x11_dl" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.21.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_aliases" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glutin-winit."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "glutin-winit";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "629a873fc04062830bfe8f97c03773bcd7b371e23bcc465d0a61448cd1588fa4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "egl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "glx")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wgl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "x11")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "glutin" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glutin."0.30.10" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "winit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.28.7" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_aliases" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glutin_egl_sys."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "glutin_egl_sys";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af784eb26c5a68ec85391268e074f0aa618c096eadb5d6330b0911cf34fe57c5"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "gl_generator" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".gl_generator."0.14.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glutin_glx_sys."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "glutin_glx_sys";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b53cb5fe568964aa066a3ba91eac5ecbac869fb0842cd0dc9e412434f1a1494"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd") then "x11_dl" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.21.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "gl_generator" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".gl_generator."0.14.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glutin_wgl_sys."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "glutin_wgl_sys";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef89398e90033fc6bc65e9bd42fd29bbbfd483bda5b56dc5562f455550618165"; };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "gl_generator" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".gl_generator."0.14.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glyph_brush."0.7.8" = overridableMkRustCrate (profileName: rec {
    name = "glyph_brush";
    version = "0.7.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a3676f482c536a985fca36ce320a5e5b8fafd7b260806742af1963b71c5dc38c"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "glyph_brush_draw_cache" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush_draw_cache."0.1.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "glyph_brush_layout" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ordered_float" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ordered-float."4.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustc_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "twox_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glyph_brush_draw_cache."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "glyph_brush_draw_cache";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6010675390f6889e09a21e2c8b575b3ee25667ea8237a8d59423f73cb8c28610"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ab_glyph" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.23" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.parsed.cpu.name == "wasm32") then "crossbeam_channel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.11" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.parsed.cpu.name == "wasm32") then "crossbeam_deque" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "linked_hash_map" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !(hostPlatform.parsed.cpu.name == "wasm32") then "rayon" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.8.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustc_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "glyph_brush_layout";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc32c2334f00ca5ac3695c5009ae35da21da8c62d255b5b96d56e2597a637a38"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ab_glyph" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.23" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "approx" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "xi_unicode" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "22beaafc29b38204457ea030f6fb7a84c9e4dd1b86e311ba0542533453d87f62"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "gpu_alloc_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc-types";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54804d0d6bc9d7f26db4eaec1ad10def69b599315f487d32c334a80d1efe67a5"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-allocator."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "gpu-allocator";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce95f9e2e11c2c6fadfce42b5af60005db06576f231f5c92550fdded43c423e8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3d12")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "public-winapi")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "windows")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "backtrace" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "windows" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows."0.44.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc11df1ace8e7e564511f53af41f3e42ddc95b56fd07b3f4445d2a6048bc682c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "gpu_descriptor_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor-types";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6bf0b36e6f090b7e1d8a4b49c0cb81c1f8376f72198c65dd3ad9ff3556b8b78c"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".guillotiere."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "guillotiere";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b62d5865c036cb1393e23c50693df631d3f5d7bcca4c04fe4cc0fd592e74a782"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "euclid" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".euclid."0.22.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "svg_fmt" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".svg_fmt."0.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".half."2.4.0" = overridableMkRustCrate (profileName: rec {
    name = "half";
    version = "2.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5eceaaeec696539ddaf7b333340f1af35a5aa87ae3e4f3ead0532f72affab2e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "spirv" then "crunchy" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d7afe4a420e3fe79967a00898cc1f4db7c8a49a9333a29f8a4bd76a253d5cd04"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "default" ]
      [ "inline-more" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.4.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "raw")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.3" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.14.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "290f1a1d9242c78d09ce40a5e87e7554ee637af1351968159f4952f028f75604"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "ahash")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "allocator-api2")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "inline-more")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "raw")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ahash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "allocator_api2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".allocator-api2."0.2.16" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hassle-rs."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "hassle-rs";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90601c6189668c7345fc53842cb3f3a3d872203d523be1b3cb44a36a3e62fb85"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "com_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".com-rs."0.2.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libloading" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "widestring" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".widestring."0.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "379dada1584ad501b383485dd706b8afb7a70fcbc7f4da7d780638a5a6124a60"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hexf-parse."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "hexf-parse";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfa686283ad6dd069f105e5ab091b04c62850d3e4cf5d67debad1933f55023df"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".home."0.5.9" = overridableMkRustCrate (profileName: rec {
    name = "home";
    version = "0.5.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "humantime";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iced."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "iced";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "efbddf356d01e9d41cd394a9d04d62bfd89650a30f12fda5839cabb8c4591c88"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "iced_wgpu")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wgpu")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_core."0.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_futures."0.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_graphics" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_graphics."0.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_native" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_native."0.10.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (!(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.cpu.name == "wasm32") then "iced_wgpu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_wgpu."0.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_winit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_winit."0.9.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iced_core."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "iced_core";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11e1942e28dedee756cc27e67e7a838cdc1e59fb6bf9627ec9f709ab3b135782"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "palette")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "instant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "palette" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".palette."0.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iced_futures."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "iced_futures";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "215d51fa4f70dbb63775d7141243c4d98d4d525d8949695601f8fbac7dcbc04e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "thread-pool")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.41" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_timer" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iced_graphics."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "iced_graphics";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "338a6aff7db906537074ad0fe8b720cfdb9512cdfea43c628c76bd1cf50fdcc0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "font-fallback")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "font-icons")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "glam" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.21.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_native" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_native."0.10.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_style" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_style."0.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iced_native."0.10.3" = overridableMkRustCrate (profileName: rec {
    name = "iced_native";
    version = "0.10.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d012eb06da490fe46a695b39721c20da9643f35cf2ecb9d30618fdeb96170616"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_core."0.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_futures."0.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_style" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_style."0.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.18" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "twox_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "unicode_segmentation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.11.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iced_style."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "iced_style";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e37333dc2991201140302cd0d4cea051bd37ca3671d5008ec85df86d232ff30"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_core."0.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "palette" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".palette."0.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iced_wgpu."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "iced_wgpu";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "478803c56061f567ce5ddf223b20d11d3c118cc46bb0d0552370dc65cdc4cb9c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "webgl")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "encase" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".encase."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "glam" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.21.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "glyph_brush" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush."0.7.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "guillotiere" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".guillotiere."0.6.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_graphics" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_graphics."0.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_native" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_native."0.10.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wgpu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu."0.15.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wgpu_glyph" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu_glyph."0.19.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iced_winit."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "iced_winit";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a59ea3a85149a6a1f9e92b6c740ce90f04e5c7d848cfd05742336863fceb955"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "application")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland-csd-adwaita")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland-dlopen")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "x11")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_futures."0.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_graphics" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_graphics."0.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "iced_native" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iced_native."0.10.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "window_clipboard" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".window_clipboard."0.2.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "winit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.27.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ident_case";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "unicode_bidi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.15" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "unicode_normalization" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.23" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".image."0.24.9" = overridableMkRustCrate (profileName: rec {
    name = "image";
    version = "0.24.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5690139d2f55868e080017335e4b94cb7414274c74f1669c84fb5feba2c9f69d"; };
    features = builtins.concatLists [
      [ "bmp" ]
      [ "dds" ]
      [ "default" ]
      [ "dxt" ]
      [ "exr" ]
      [ "farbfeld" ]
      [ "gif" ]
      [ "hdr" ]
      [ "ico" ]
      [ "jpeg" ]
      [ "jpeg_rayon" ]
      [ "openexr" ]
      [ "png" ]
      [ "pnm" ]
      [ "qoi" ]
      [ "tga" ]
      [ "tiff" ]
      [ "webp" ]
    ];
    dependencies = {
      bytemuck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      color_quant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" { inherit profileName; }).out;
      exr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".exr."1.72.0" { inherit profileName; }).out;
      gif = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gif."0.13.1" { inherit profileName; }).out;
      jpeg = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jpeg-decoder."0.3.1" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.18" { inherit profileName; }).out;
      png = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".png."0.17.13" { inherit profileName; }).out;
      qoi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".qoi."0.4.1" { inherit profileName; }).out;
      tiff = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiff."0.9.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".imagesize."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "imagesize";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df19da1e92fbfec043ca97d622955381b1f3ee72a180ec999912df31b1ccd951"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "autocfg" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."2.2.3" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "2.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "233cf39063f058ea2caae4091bf4a3ef70a653afbc026f5c4a4135d114e3c177"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "equivalent" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "js-sys")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "wasm-bindgen")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "wasm-bindgen_rs")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "web-sys")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown") then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown") then "wasm_bindgen_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown") then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."1.0.11" = overridableMkRustCrate (profileName: rec {
    name = "io-lifetimes";
    version = "1.0.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "close")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "hermit-abi")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "libc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "windows-sys")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.8" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".is-terminal."0.4.12" = overridableMkRustCrate (profileName: rec {
    name = "is-terminal";
    version = "0.4.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f23ff5ef2b80d608d61efee834934d862cd92461afc0560dedf493e4c033738b"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.8" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.10" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "1.0.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1a46d1a171d865aa5f83f92695765caa047a9b4cbae2cbf37dbd613a793fd4c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni."0.21.1" = overridableMkRustCrate (profileName: rec {
    name = "jni";
    version = "0.21.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a87aa2bb7d2af34197c04845522473242e1aa17c12f4935d5856491a7fb8c97"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cesu8" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "combine" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."4.6.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "jni_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "walkdir" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jni-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jpeg-decoder."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "jpeg-decoder";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f5d4a7da358eff58addd2877a45865158f0d78c911d43a5784ceb7bbf52833b0"; };
    features = builtins.concatLists [
      [ "rayon" ]
    ];
    dependencies = {
      rayon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.68";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "406cda4b368d531c842222cf9d2600a9a4acce8d29423695379c6868a143a9ee"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".khronos-egl."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "khronos-egl";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c2352bd1d0bceb871cb9d40f24360c8133c11d7486b68b5381c1dd1a32015e3"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "1_0")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "1_1")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "1_2")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "1_3")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "1_4")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "1_5")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dynamic")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "libloading")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "no-pkg-config")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "pkg-config")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "static")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libloading" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".khronos_api."3.1.0" = overridableMkRustCrate (profileName: rec {
    name = "khronos_api";
    version = "3.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2db585e1d738fc771bf08a151420d3ed193d9d895a36df7f6f8a9456b911ddc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kurbo."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "kurbo";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a53776d271cfb873b17c618af0298445c88afc52837f3e948fa3fafd131f449"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "arrayvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lebe."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "lebe";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03087c2bad5e1034e8cace5926dec053fb3790248370865f5117a7d0213354c8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.153";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c198f91728a82281a64e1f4f9eeb25d82cb32a5de251c6bd1b5154d63a8e7bd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "extra_traits" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isUnix then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c571b676ddfc9a8c12f1f3d3085a7b163966a8fd8098a90640953ce5f6170161"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isUnix then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libredox."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "libredox";
    version = "0.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85c833ca1e66078851dba29046874e38f08b2c883700aa29a03ddd3b23814ee8"; };
    features = builtins.concatLists [
      [ "call" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      syscall = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libredox."0.0.2" = overridableMkRustCrate (profileName: rec {
    name = "libredox";
    version = "0.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3af92c55d7d839293953fcd0fda5ecfe93297cfde6ffbdec13b41d99c0ba6607"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "call")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linicon."2.3.0" = overridableMkRustCrate (profileName: rec {
    name = "linicon";
    version = "2.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ee8c5653188a809616c97296180a0547a61dba205bcdcbdd261dbd022a25fd9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "linicon-theme" ]
      [ "system-theme" ]
    ];
    dependencies = {
      file_locker = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".file-locker."1.1.2" { inherit profileName; }).out;
      freedesktop_entry_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".freedesktop_entry_parser."1.3.0" { inherit profileName; }).out;
      linicon_theme = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linicon-theme."1.2.0" { inherit profileName; }).out;
      memmap2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.10" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linicon-theme."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "linicon-theme";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4f8240c33bb08c5d8b8cdea87b683b05e61037aa76ff26bef40672cc6ecbb80"; };
    dependencies = {
      freedesktop_entry_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".freedesktop_entry_parser."1.3.0" { inherit profileName; }).out;
      ini = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rust-ini."0.17.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" = overridableMkRustCrate (profileName: rec {
    name = "linked-hash-map";
    version = "0.5.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "linux-raw-sys";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef53942eb7bf7ff43a617b3e2c1c4a5ecf5944a7c1bc12d7ee39bbb15e5c1519"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "errno")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "general")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "ioctl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "no_std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.13" = overridableMkRustCrate (profileName: rec {
    name = "linux-raw-sys";
    version = "0.4.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "elf")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "errno")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "general")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "if_ether")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ioctl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "net")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "netlink")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "no_std")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "prctl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "system")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "xdp")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.11" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c168f8615b12bc01f9c17e2eb0cc07dcae1940121185446edc3744920e8ef45"; };
    features = builtins.concatLists [
      [ "atomic_usize" ]
      [ "default" ]
    ];
    dependencies = {
      scopeguard = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5e6163cb8c49088c2c36f57875e58ccd8c87c7427f7fbd50ea6710b2f3f2e8f"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" = overridableMkRustCrate (profileName: rec {
    name = "malloc_buf";
    version = "0.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "523dc4f511e55ab87b694dc30d0f820d60906ef06413f93d4d7a1385599cc149"; };
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.10" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.5.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "83faa42c0a078c393f6b29d5db232d8be22776a891f8f56e5284faee4a20b327"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe751422e4a8caa417e13c3ea66452215d7d63e19e604f4980461212f3ae1322"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5de893c32cde5f383baa4c04c5d6dbdd735cfd4a794b0debdb2bb1b421da5ff4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
    ];
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "autocfg" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a634b1c61a95585bd15607c6ab0c4e5b226e695ff2800ba0cdccddf208c406c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
    ];
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "autocfg" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".metal."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "metal";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "de11355d1f6781482d027a3b4d4de7825dcedb197bf573e0596d00008402d060"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "block" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "core_graphics_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "foreign_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" = overridableMkRustCrate (profileName: rec {
    name = "mime";
    version = "0.3.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mime_guess."2.0.4" = overridableMkRustCrate (profileName: rec {
    name = "mime_guess";
    version = "2.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4192263c238a5f0d0c6bfd21f336a313a4ce1c450542449ca191bb657b4642ef"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "mime" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "unicase" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.7.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "unicase" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.7.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "simd" ]
      [ "simd-adler32" ]
      [ "with-alloc" ]
    ];
    dependencies = {
      adler = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" { inherit profileName; }).out;
      simd_adler32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.8.10" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.8.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f3d0b296e374a4e6f3c7b0a1f5a51d748a0d34c85e7dc48fc3fa9a87657fe09"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "log")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "os-ext")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "os-poll")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi") then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".naga."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "naga";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c3d4269bcb7d50121097702fde1afb75f4ea8083aeb7a55688dcf289a853271"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "clone")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "codespan-reporting")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "glsl-out")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "hexf-parse")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "hlsl-out")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "msl-out")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "span")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "spirv")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "spv-out")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "termcolor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "unicode-xid")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "validate")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wgsl-in")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wgsl-out")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bit_set" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "codespan_reporting" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "hexf_parse" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hexf-parse."0.2.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "indexmap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.18" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustc_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "spirv" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv."0.2.0+1.5.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "termcolor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.4.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "unicode_xid" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "451422b7e4718271c8b5b3aadf5adedba43dc76312454b387e98fae0fc951aa0"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "jni_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "ffi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "num_enum" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.11" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk-context";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-glue";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0434fabdd2c15e0aab768ca31d5b7b333717f03cf02037d5a0a3ff3c278ed67f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ndk" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ndk_context" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ndk_macro" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.3.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ndk_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-macro";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0df7ac00c4672f9d5aece54ee3347520b7e20f158656c7db2e6de01902eb7a6c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "darling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.13.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" = overridableMkRustCrate (profileName: rec {
    name = "ndk-sys";
    version = "0.4.1+23.1.7779620";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3cf2aae958bd232cac5069850591667ad422d263686d75b52a065f9badeee5a3"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "jni_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.23.2" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.23.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f3790c00a0150112de0f4cd161e3d7fc4b2d8a5542ffc35f099a2562aecb35c"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "cc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.88" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.24.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa52e972a9a719cecb6864fb88568781eb706bac2cd1d4f04a648542dbf78069"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "fs")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "memoffset")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "mman")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "poll")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "socket")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "uio")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.25.1" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.25.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f346ff70e7dbfd675fe90590b92d59ef2de15a8779ae305ebcbfd3f0caf59be4"; };
    features = builtins.concatLists [
      [ "acct" ]
      [ "aio" ]
      [ "default" ]
      [ "dir" ]
      [ "env" ]
      [ "event" ]
      [ "feature" ]
      [ "fs" ]
      [ "hostname" ]
      [ "inotify" ]
      [ "ioctl" ]
      [ "kmod" ]
      [ "memoffset" ]
      [ "mman" ]
      [ "mount" ]
      [ "mqueue" ]
      [ "net" ]
      [ "personality" ]
      [ "pin-utils" ]
      [ "poll" ]
      [ "process" ]
      [ "pthread" ]
      [ "ptrace" ]
      [ "quota" ]
      [ "reboot" ]
      [ "resource" ]
      [ "sched" ]
      [ "signal" ]
      [ "socket" ]
      [ "term" ]
      [ "time" ]
      [ "ucontext" ]
      [ "uio" ]
      [ "user" ]
      [ "zerocopy" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; }).out;
      pin_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.26.4" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.26.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "598beaf3cc6fdd9a5dfb1630c2800c7acd31df7aaf0f565796fba2b53ca1af1b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "feature")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "memoffset")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "socket")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "uio")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "user")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "nohash-hasher";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
      minimal_lexical = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.18" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da0df0e5185db44f69b44f26786fe401b6c293d1907744beaa7fa62b2e5a517a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.11" = overridableMkRustCrate (profileName: rec {
    name = "num_enum";
    version = "0.5.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f646caf906c20226733ed5b1374287eb97e3c2a5c227ce668c1f2ce20ae57c9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "num_enum_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.11" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "num_enum";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a015b430d3c108a207fd776d2e2196aaf8b1cf8cf93253e3a097ff3085076a1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "num_enum_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.6.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.11" = overridableMkRustCrate (profileName: rec {
    name = "num_enum_derive";
    version = "0.5.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dcbff9bc912032c62bf65ef1d5aea88983b420f4f839db1e9b0c281a25c9c799"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "proc-macro-crate")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "num_enum_derive";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96667db765a921f7b295ffee8b60472b686a51d4f21c2ee4ffdb94c7013b65a6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "proc-macro-crate")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "objc";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "objc_exception")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "malloc_buf" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "objc_exception" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc-foundation."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "objc-foundation";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1add1b659e36c9607c7aab864a76c7a4c2760cd0cd2e120f3fb8b952c7e22bf9"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "block" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "objc_id" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc-sys."0.2.0-beta.2" = overridableMkRustCrate (profileName: rec {
    name = "objc-sys";
    version = "0.2.0-beta.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df3b9834c1e95694a05a828b59f55fa2afec6288359cda67146126b3f90a55d7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "apple")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc2."0.3.0-beta.3.patch-leaks.3" = overridableMkRustCrate (profileName: rec {
    name = "objc2";
    version = "0.3.0-beta.3.patch-leaks.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e01640f9f2cb1220bbe80325e179e532cb3379ebcd1bf2279d703c19fe3a468"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "apple")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "foundation")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "block2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block2."0.2.0-alpha.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "objc_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-sys."0.2.0-beta.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "objc2_encode" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc2-encode."2.0.0-pre.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc2-encode."2.0.0-pre.2" = overridableMkRustCrate (profileName: rec {
    name = "objc2-encode";
    version = "2.0.0-pre.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "abfcac41015b00a120608fdaa6938c44cb983fee294351cc4bac7638b4e50512"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "apple")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "objc_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-sys."0.2.0-beta.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "objc_exception";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4"; };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.88" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "objc_id";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c92d4ddb4bd7b50d730c215ff871754d0da6b2178849f8a2a2ab69712d0c073b"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.32.2" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.32.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "archive")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "coff")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "elf")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "macho")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "pe")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "read_core")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "unaligned")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "race" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".option-ext."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "option-ext";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".orbclient."0.3.47" = overridableMkRustCrate (profileName: rec {
    name = "orbclient";
    version = "0.3.47";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52f0d54bde9774d3a51dcf281a5def240c71996bc6ca05d2c847ec8b2b216166"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "redox" then "libredox" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libredox."0.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ordered-float."4.2.0" = overridableMkRustCrate (profileName: rec {
    name = "ordered-float";
    version = "4.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a76df7075c7d4d01fdcb46c912dd17fba5b60c78ea480b475f2b6ab6f666584e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.18" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ordered-multimap."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "ordered-multimap";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1c672c7ad9ec066e428c00eb917124a06f08db19e2584de982cc34b1f4c12485"; };
    dependencies = {
      dlv_list = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlv-list."0.2.3" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.9.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ordered-stream."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "ordered-stream";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9aa2b01e1d916879f73a53d01d1d6cee68adbb31d6d9177a8cfce093cced1d50"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.20.0" = overridableMkRustCrate (profileName: rec {
    name = "owned_ttf_parser";
    version = "0.20.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4586edfe4c648c71797a74c84bacb32b52b212eff5dfe2bb9f2c599844023e7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "apple-layout")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "glyph-names")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "opentype-layout")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "variable-fonts")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "ttf_parser" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.20.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".palette."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "palette";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f9cd68f7112581033f157e56c77ac4a5538ec5836a2e39284e65bd7d7275e49"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "named")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "named_from_str")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "named_gradients")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "phf")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "approx" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.18" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "palette_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".palette_derive."0.6.1" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "phf" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf."0.11.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".palette_derive."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "palette_derive";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05eedf46a8e7c27f74af0c9cfcdb004ceca158cb1b918c6f68f8d7a549b3e427"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "find_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "parking";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb813b8af86854136c6922af0598d719255ecb2179515e6e7730d468f05c9cae"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "instant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "lock_api" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.11" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "parking_lot_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "lock_api" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.11" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "parking_lot_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "instant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.9" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.9.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c42a9226546d68acdd9c0a280d17ce19bfe27a46bf68784e4066115788d008e"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.4.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" = overridableMkRustCrate (profileName: rec {
    name = "paste";
    version = "1.0.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "phf";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ade2d8b8f33c7333b51bcf0428d37e217e9f32192ae4772156f65063b8ce03dc"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "macros")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "phf_macros")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "phf_macros" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_macros."0.11.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "phf_shared" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.11.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "phf_generator";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "48e4cc64c2ad9ebe670cb8fd69dd50ae301650392e81c05f9bfcb2d5bdbc24b0"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "phf_shared" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.11.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_macros."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "phf_macros";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3444646e286606587e49f3bcf1679b8cef1dc2c5ecc29ddacaffc305180d464b"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "phf_generator" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.11.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "phf_shared" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.11.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "phf_shared";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90fcb95eef784c2ac79119d1dd819e162b5da872ce6f3c3abe1e8ca1c082f72b"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "siphasher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pico-args."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "pico-args";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5be167a7af36ee22fe3115051bc51f6e6c7054c9348e28deb4f49bd6f705a315"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "eq-separator")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8afb450f006bf6385ca15ef45d71d2288452bc3683ce2e2cacc0d18e4be60b58"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-utils";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".piper."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "piper";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "668d31b1c4eba19242f2088b2bf3316b82ca31082a8335764db4e083db7485d4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "futures-io")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "atomic_waker" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "fastrand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".png."0.17.13" = overridableMkRustCrate (profileName: rec {
    name = "png";
    version = "0.17.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06e4b0d3d1312775e782c86c91a111aa1f910cbb65e1337f9975b5f9a554b5e1"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.0" { inherit profileName; }).out;
      fdeflate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fdeflate."0.3.4" { inherit profileName; }).out;
      flate2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.28" { inherit profileName; }).out;
      miniz_oxide = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".polling."2.8.0" = overridableMkRustCrate (profileName: rec {
    name = "polling";
    version = "2.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4b2d323e8ca7996b3e23126511a523f7e62924d93ecd5ae73b333815b0eb3dce"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "vxworks") then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "autocfg" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".polling."3.5.0" = overridableMkRustCrate (profileName: rec {
    name = "polling";
    version = "3.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "24f040dee2588b4963afb4e420540439d126f73fdacf4a9c486a96d840bac3c9"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.4.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "vxworks") then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "1.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "toml_edit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.19.15" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.78";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2422ad645d89c99f8f3e6b88a9fdeca7fabeac836b1002371c4367c8f984aae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.15" = overridableMkRustCrate (profileName: rec {
    name = "profiling";
    version = "1.0.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "43d84d1d7a6ac92673717f9f6d1518374ef257669c24ebc5ac25d5033828be58"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".qoi."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "qoi";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f6d64c71eb498fe9eae14ce4ec935c555749aef511cca85b5568910d6e48001"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bytemuck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "quick-xml";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1004a344b30a54e2ee58d66a71b32d2db2feb0a31f9a2d302bf0536f15de2a33"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.35";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "291ec9ab5efd934aaf503a6466c5d5251535d108ee747472c3977cc5acc868ef"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "small_rng")
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      rand_chacha = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "range-alloc";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c8a99fddc9f0ba0a85884b8d14e3592853e787d581ca1816c91349b10e4eeab"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e28f55143d0548dad60bb4fbdc835a3d7ac6acc3324506450c5fdd6e42903a76"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "new" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.4.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b800beb9b6e7d2df1fe337c9e3d04e3af22a124460fb4c30fcc22c9117cefb41"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cty" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cty."0.2.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f2ff9a1f06a88b01621b7ae906ef0211290d1c8a168a15542486a8f61c0833b9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "rayon";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa7237101a77a10773db45d62004a272517633fbcc3df19d96455ede1122e051"; };
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.10.0" { inherit profileName; }).out;
      rayon_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.1" = overridableMkRustCrate (profileName: rec {
    name = "rayon-core";
    version = "1.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2"; };
    dependencies = {
      crossbeam_deque = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.5" { inherit profileName; }).out;
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rctree."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "rctree";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b42e27ef78c35d3998403c1d26f3efd9e135d3e5121b0a4845cc5cc27547f4f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.2.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "redox_users";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a18479200779601e498ada4e8c1e1f50e3ee19deb0259c25825a98b5603b2cb4"; };
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.12" { inherit profileName; }).out;
      libredox = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libredox."0.0.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.10.3" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.10.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b62dbe01f0b06f9d8dc7d49e05a0785f153b00b2c227856282f671e0318c9b15"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      [ "perf" ]
      [ "perf-backtrack" ]
      [ "perf-cache" ]
      [ "perf-dfa" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "perf-onepass" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-age")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-bool")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-case")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-gencat")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-perl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-script")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-segment")
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.2" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
      regex_automata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.5" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5bb987efffd3c6d0d8f5f89510bb458559eab11e4f869acb20bf845e016259cd"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "dfa-onepass" ]
      [ "hybrid" ]
      [ "meta" ]
      [ "nfa-backtrack" ]
      [ "nfa-pikevm" ]
      [ "nfa-thompson" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "perf-literal-multisubstring" ]
      [ "perf-literal-substring" ]
      [ "std" ]
      [ "syntax" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-age")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-bool")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-case")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-gencat")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-perl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-script")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-segment")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-word-boundary")
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.2" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c08c74e62047bb2de4ff487b251e4a92e24f48745648451635cec7d591162d9f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-age")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-bool")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-case")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-gencat")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-perl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-script")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "unicode-segment")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".renderdoc-sys."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "renderdoc-sys";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1382d1f0a252c4bf97dc20d979a2fdd05b024acd7c2ed0f7595d7817666a157"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".resvg."0.28.0" = overridableMkRustCrate (profileName: rec {
    name = "resvg";
    version = "0.28.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c115863f2d3621999cf187e318bc92b16402dfeff6a48c74df700d77381394c1"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pico_args" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pico-args."0.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "rgb" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rgb."0.8.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "svgtypes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".svgtypes."0.8.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tiny_skia" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-skia."0.8.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "usvg" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".usvg."0.28.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rgb."0.8.37" = overridableMkRustCrate (profileName: rec {
    name = "rgb";
    version = "0.8.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05aaa8004b64fd573fc9d002f4e632d51ad4f026c2b5ba95fcb6c2f32c2c47d8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "as-bytes")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "bytemuck")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".roxmltree."0.15.1" = overridableMkRustCrate (profileName: rec {
    name = "roxmltree";
    version = "0.15.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6b9de9831a129b122e7e61f242db509fa9d0838008bf0b29bb0624669edfe48a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "xmlparser" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xmlparser."0.13.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rust-ini."0.17.0" = overridableMkRustCrate (profileName: rec {
    name = "rust-ini";
    version = "0.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "63471c4aa97a1cf8332a5f97709a79a4234698de6a1f5087faf66f2dae810e22"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ordered_multimap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ordered-multimap."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.23" = overridableMkRustCrate (profileName: rec {
    name = "rustc-demangle";
    version = "0.1.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustix."0.37.27" = overridableMkRustCrate (profileName: rec {
    name = "rustix";
    version = "0.37.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fea8ca367a3a01fe35e6943c400addf443c0f57670e6ec51196f71a4b8762dd2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "fs")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "io-lifetimes")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (!hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64"))) || hostPlatform.isWindows) then "libc_errno" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "io_lifetimes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."1.0.11" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64"))) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64")) || (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux") && !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64")))) then "linux_raw_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.3.8" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" = overridableMkRustCrate (profileName: rec {
    name = "rustix";
    version = "0.38.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ea3e1a662af26cd7a3ba09c0297a31af215563ecf42817c98df621387f4e949"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "event")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "fs")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "net")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "pipe")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "process")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "shm")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "system")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "time")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "use-libc-auxv")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64)) || hostPlatform.isWindows) then "libc_errno" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.8" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64))) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux") && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64))) then "linux_raw_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.13" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.17" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".safe_arch."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "safe_arch";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1ff3d6d9696af502cc3110dacce942840fb06ff4514cad92236ecc455f2ce05"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "bytemuck")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "scoped-tls";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sctk-adwaita."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "sctk-adwaita";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61270629cc6b4d77ec1907db1033d5c2e1a404c412743621981a871dc9c12339"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "crossfont")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "title")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "crossfont" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossfont."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "smithay_client_toolkit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.16.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "tiny_skia" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-skia."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sctk-adwaita."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "sctk-adwaita";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cda4e97be1fd174ccc2aae81c8b694e803fa99b34e8fd0f057a9d70698e3ed09"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "ab_glyph")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "ab_glyph" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.23" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "memmap2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.10" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "smithay_client_toolkit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.16.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tiny_skia" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-skia."0.8.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.197";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3fb1c873e1b9b056a4dc4c0c198b24c3ffa059243875552b2bd0933b1aee4ce2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "rc")
      [ "serde_derive" ]
      [ "std" ]
    ];
    dependencies = {
      serde_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.197" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.197" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.197";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7eb0b34b42edc17f6b7cac84a52a1c5f0e1bb2227e997ca9011ea3dd34e8610b"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.114" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.114";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c5f09b1bd632ef549eaa9f60a1f8de742bdbc698e6cee2095fc84dde5f549ae0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.10" { inherit profileName; }).out;
      ryu = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.17" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_repr."0.1.18" = overridableMkRustCrate (profileName: rec {
    name = "serde_repr";
    version = "0.1.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b2e6b945e9d3df726b65d6ee24060aff8e3533d431f677a9695db04eff9dfdb"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".servo-fontconfig."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "servo-fontconfig";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c7e3e22fe5fd73d04ebf0daa049d3efe3eae55369ce38ab16d07ddd9ac5c217c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "force_system_lib")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "fontconfig_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".servo-fontconfig-sys."5.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".servo-fontconfig-sys."5.1.0" = overridableMkRustCrate (profileName: rec {
    name = "servo-fontconfig-sys";
    version = "5.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e36b879db9892dfa40f95da1c38a835d41634b825fbd8c4c418093d53c24b388"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "force_system_lib")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "expat_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".expat-sys."2.1.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "freetype_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".freetype-sys."0.13.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "sha1";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64") then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "digest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.1" = overridableMkRustCrate (profileName: rec {
    name = "signal-hook-registry";
    version = "1.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "simd-adler32";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe"; };
    features = builtins.concatLists [
      [ "const-generics" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simplecss."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "simplecss";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a11be7c62927d9427e9f40f3444d5499d868648e2edbc4e2116de69e7ec0e89d"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".single-instance."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "single-instance";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4637485391f8545c9d3dbf60f9d9aab27a90c789a700999677583bcb17c8795d"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "nix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.23.2" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      widestring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".widestring."0.4.3" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.11" = overridableMkRustCrate (profileName: rec {
    name = "siphasher";
    version = "0.3.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "autocfg" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "slotmap";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dbff4acf519f630b3a3ddcfaea6c06b42174d9a44bc70c620e9ed1649d58b82a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "version_check" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.1" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6ecd384b10a64542d77071bd64bd7b231f4ed5940fba55e98c3de13824cf3d7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "const_generics")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "const_new")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "union")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.16.1" = overridableMkRustCrate (profileName: rec {
    name = "smithay-client-toolkit";
    version = "0.16.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "870427e30b8f2cbe64bf43ec4b86e88fe39b0a84b3f15efd9c9c2d020bc86eb9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "calloop")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "dlopen")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "calloop" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".calloop."0.10.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "dlib" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "memmap2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.10" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "nix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_cursor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.29.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_protocols" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.29.5" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.18.1" = overridableMkRustCrate (profileName: rec {
    name = "smithay-client-toolkit";
    version = "0.18.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "922fd3eeab3bd820d76537ce8f582b1cf951eceb5475c28500c7457d9d17f53a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "calloop")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "calloop-wayland-source")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "calloop" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".calloop."0.12.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "calloop_wayland_source" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".calloop-wayland-source."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cursor_icon" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cursor-icon."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "memmap2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_backend" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.3.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.31.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_csd_frame" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-csd-frame."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_cursor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.31.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_protocols" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.31.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_protocols_wlr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols-wlr."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_scanner" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.31.1" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "xkeysym" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xkeysym."0.2.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-clipboard."0.6.6" = overridableMkRustCrate (profileName: rec {
    name = "smithay-clipboard";
    version = "0.6.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0a345c870a1fae0b1b779085e81b51e614767c239e93503588e54c5b17f4b0e8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "dlopen")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "sctk" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.16.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-clipboard."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "smithay-clipboard";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c091e7354ea8059d6ad99eace06dd13ddeedbb0ac72d40a9a6e7ff790525882d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dlopen")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "sctk" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.18.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_backend" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.3.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.10" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.4.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f7916fc008ca5542385b89a3d3ce689953c143e9304a9bf8beec1de48994c0d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "all")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" = overridableMkRustCrate (profileName: rec {
    name = "spin";
    version = "0.9.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67"; };
    features = builtins.concatLists [
      [ "barrier" ]
      [ "default" ]
      [ "lazy" ]
      [ "lock_api" ]
      [ "lock_api_crate" ]
      [ "mutex" ]
      [ "once" ]
      [ "rwlock" ]
      [ "spin_mutex" ]
    ];
    dependencies = {
      lock_api_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv."0.2.0+1.5.4" = overridableMkRustCrate (profileName: rec {
    name = "spirv";
    version = "0.2.0+1.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "246bfa38fe3db3f1dfc8ca5a2cdeb7348c78be2112740cc0ec8ef18b6d94f830"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.18" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "static_assertions";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".str-buf."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "str-buf";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e08d8363704e6c71fc928674353e6b7c23dcea9d82d7012c8faf2a3a025f8d0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strict-num."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "strict-num";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6637bab7722d379c8b41ba849228d680cc12d0a45ba1fa2b48f2a30577a06731"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "approx-eq")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "float-cmp")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "float_cmp" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".float-cmp."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5ee073c9e4cd00e28217186dbe12796d692868f432bf2e97ee73bed0c56dfa01"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".svg_fmt."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "svg_fmt";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fb1df15f412ee2e9dfc1c504260fa695c1c3f10fe9f4a6ee2d2184d7d6450e2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".svgtypes."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "svgtypes";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "22975e8a2bac6a76bb54f898a6b18764633b00e780330f0b689f65afb3975564"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "siphasher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.109";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "clone-impls")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "derive")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "extra-traits")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "fold")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "full")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "parsing")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "printing")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "proc-macro")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "quote")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "visit")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "unicode_ident" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "2.0.51";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ab617d94515e94ae53b8406c628598680aa0c9587474ecbe58188f7b345d66c"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "extra-traits")
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "visit")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "visit-mut")
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.10.1" = overridableMkRustCrate (profileName: rec {
    name = "tempfile";
    version = "3.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "fastrand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.0.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi") then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".termcolor."1.4.1" = overridableMkRustCrate (profileName: rec {
    name = "termcolor";
    version = "1.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.57";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e45bcbe8ed29775f228095caf2cd67af7a4ccf756ebff23a306bf3e8b47b24b"; };
    dependencies = {
      thiserror_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.57" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.57" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.57";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a953cb265bef375dae3de6663da4d3804eee9682ea80d8e2542529b73c531c81"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.8" = overridableMkRustCrate (profileName: rec {
    name = "thread_local";
    version = "1.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiff."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "tiff";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba1310fcea54c6a9a4fd1aad794ecc02c31682f6bfbecdf460bf19533eed1e3e"; };
    dependencies = {
      flate2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.28" { inherit profileName; }).out;
      jpeg = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jpeg-decoder."0.3.1" { inherit profileName; }).out;
      weezl = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".weezl."0.1.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiny-skia."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "tiny-skia";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "642680569bb895b16e4b9d181c60be1ed136fa0c9c7f11d004daf053ba89bf82"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "png")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "png-format")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "safe_arch")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "simd")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "arrayref" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "arrayvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "png" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".png."0.17.13" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "safe_arch" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".safe_arch."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "tiny_skia_path" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-skia-path."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiny-skia."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "tiny-skia";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df8493a203431061e901613751931f047d1971337153f96d0e5e363d6dbf6a67"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "png")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "png-format")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "simd")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "arrayref" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "arrayvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "png" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".png."0.17.13" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tiny_skia_path" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-skia-path."0.8.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiny-skia-path."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "tiny-skia-path";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c114d32f0c2ee43d585367cb013dfaba967ab9f62b90d9af0d696e955e70fa6c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "arrayref" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiny-skia-path."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "tiny-skia-path";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "adbfb5d3f3dd57a0e11d12f4f13d4ebbbc1b5c15b7ab0a156d030b21da5f677c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "arrayref" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "strict_num" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strict-num."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "tinyvec_macros")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tinyvec_macros" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.5.11" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.5.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "toml_datetime";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.19.15" = overridableMkRustCrate (profileName: rec {
    name = "toml_edit";
    version = "0.19.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "indexmap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.2.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "toml_datetime" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "winnow" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winnow."0.5.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.40";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "attributes")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "tracing-attributes")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tracing_attributes" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.27" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "tracing_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.27" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "once_cell")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.20.0" = overridableMkRustCrate (profileName: rec {
    name = "ttf-parser";
    version = "0.20.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17f77d76d837a7830fe1d4f12b7b4ba4192c1888001c7164257e4bc6d21d96b4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "apple-layout")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "glyph-names")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "opentype-layout")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "variable-fonts")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" = overridableMkRustCrate (profileName: rec {
    name = "twox-hash";
    version = "1.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "rand")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".uds_windows."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "uds_windows";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "89daebc3e6fd160ac4aa9fc8b3bf71e1f74fbf92367ae71fb83a037e8bf164b9"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "memoffset" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.9.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "tempfile" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.10.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicase."2.7.0" = overridableMkRustCrate (profileName: rec {
    name = "unicase";
    version = "2.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7d2d4dafb69621809a81864c9c1b864479e1235c0dd4e199924b9742439ed89"; };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "version_check" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.15" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bidi";
    version = "0.3.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "hardcoded-data")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" = overridableMkRustCrate (profileName: rec {
    name = "unicode-ident";
    version = "1.0.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.23" = overridableMkRustCrate (profileName: rec {
    name = "unicode-normalization";
    version = "0.1.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tinyvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.11.0" = overridableMkRustCrate (profileName: rec {
    name = "unicode-segmentation";
    version = "1.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.11" = overridableMkRustCrate (profileName: rec {
    name = "unicode-width";
    version = "0.1.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e51733f11c9c4f72aa0c160008246859e340b00807569a0da0e7a1079b27ba85"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "unicode-xid";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31e6302e3bb753d46e83516cae55ae196fc0c309407cf11ab35cc51a4c2a4633"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "form_urlencoded" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "idna" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".usvg."0.28.0" = overridableMkRustCrate (profileName: rec {
    name = "usvg";
    version = "0.28.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b5b7c2b30845b3348c067ca3d09e20cc6e327c288f0ca4c48698712abf432e9"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "base64" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "data_url" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-url."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "flate2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.28" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "imagesize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".imagesize."0.10.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "kurbo" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".kurbo."0.8.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "rctree" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rctree."0.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "roxmltree" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".roxmltree."0.15.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "simplecss" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".simplecss."0.2.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "siphasher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.11" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "strict_num" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strict-num."0.1.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "svgtypes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".svgtypes."0.8.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "utf8parse";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "vec_map";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "waker-fn";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3c4517f54858c779bbcbf228f4fca63d121bf85fbecb2dc578cdf4a39395690"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.4.0" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d71d857dc86794ca4c280d616f7da00d2dbfd8cd788846559a6813e6aa4b54ee"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "same_file" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.11.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.91";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1e124130aee3fb58c5bdd6b639a0509486b0338acaaae0c84a5124b0f588b7f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "spans")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wasm_bindgen_macro" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.91" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.91" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.91";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c9e7e1900c352b609c8488ad12639a311045f40a35491fb69ba8c12f758af70b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "spans")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bumpalo" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.15.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wasm_bindgen_shared" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.91" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.41" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.41";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "877b9c3f61ceea0e56331985743b13f3d25c406a7098d45180fb5f09bc19ed97"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.91" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.91";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b30af9e2d358182b5c7449424f017eba305ed32a7010509ede96cdc4696c46ed"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "spans")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wasm_bindgen_macro_support" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.91" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.91" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.91";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "642f325be6301eb8107a83d12a8ac6c1e1c54345a7ef1a9261962dfefda09e66"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "spans")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wasm_bindgen_backend" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.91" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wasm_bindgen_shared" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.91" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.91" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.91";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4f186bd2dcf04330886ce82d6f33dd75a7bfcf69ecf5763b89fcde53b6ac9838"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "wasm-timer";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be0ecb0db480561e9a7642b5d3e4187c128914e58aa84330b9493e3eb68c5e7f"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "pin_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.41" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "wayland-backend";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d50fa61ce90d76474c87f5fc002828d81b32677340112b4ef08079a9d459a40"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "client_system")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dlopen")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "downcast_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "scoped_tls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.31.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.88" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-client";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f3b068c05a039c9f755f881dc50f01732214f5685e379829759088967c46715"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "dlopen")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "scoped-tls")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "use_system_lib")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "downcast_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "nix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "scoped_tls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_commons" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.29.5" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_scanner" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.31.2" = overridableMkRustCrate (profileName: rec {
    name = "wayland-client";
    version = "0.31.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "82fb96ee935c2cea6668ccb470fb7771f6215d1691746c2d896b447a00ad3f1f"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_backend" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.3.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_scanner" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.31.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-commons";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8691f134d584a33a6606d9d717b95c4fa20065605f798a3f350d78dced02a902"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "nix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.29.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-csd-frame."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "wayland-csd-frame";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "625c5029dbd43d25e6aa9615e88b829a5cad13b2819c4ae129fdbb7c31ab4c7e"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cursor_icon" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cursor-icon."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_backend" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.3.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-cursor";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6865c6b66f13d6257bef1cd40cbfe8ef2f150fb8ebbdb1e8e873455931377661"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "nix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "xcursor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.31.1" = overridableMkRustCrate (profileName: rec {
    name = "wayland-cursor";
    version = "0.31.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71ce5fa868dd13d11a0d04c5e2e65726d0897be8de247c0c5a65886e283231ba"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.31.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "xcursor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b950621f9354b322ee817a23474e479b34be96c2e909c14f7bc0100e9a970bc6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "client")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "staging_protocols")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "unstable_protocols")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "wayland-client")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_commons" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.5" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wayland_scanner" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.31.2" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols";
    version = "0.31.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f81f365b8b4a97f422ac0e8737c438024b5951734506b0e1d775c73030561f4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "client")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "staging")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "unstable")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland-client")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_backend" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.3.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.31.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_scanner" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.31.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols-wlr."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols-wlr";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ad1f61b76b6c2d8742e10f9ba5c3737f6530b4c243132c2a2ccc8aa96fe25cd6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "client")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland-client")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_backend" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-backend."0.3.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.31.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_protocols" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.31.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wayland_scanner" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.31.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-scanner";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f4303d8fa22ab852f789e75a967f0a2cdc430a607751c0499bada3e451cbd53"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "xml" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.31.1" = overridableMkRustCrate (profileName: rec {
    name = "wayland-scanner";
    version = "0.31.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "63b3a62929287001986fb58c789dce9b67604a397c15c611ad9f747300b6c283"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quick_xml" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.31.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-sys";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be12ce1a3c39ec7dba25594b97b42cb3195d54953ddb9d3d95a7c3902bc6e9d4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "client")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "dlib")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "dlopen")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "lazy_static")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "dlib" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.30.1" = overridableMkRustCrate (profileName: rec {
    name = "wayland-sys";
    version = "0.30.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96b2a02ac608e07132978689a6f9bf4214949c85998c247abadd4f4129b1aa06"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "client")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "dlopen")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "egl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "lazy_static")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "dlib" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.31.1" = overridableMkRustCrate (profileName: rec {
    name = "wayland-sys";
    version = "0.31.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "15a0c8eaff5216d07f226cb7a549159267f3467b289d9a2e52fd3ef5aae2b7af"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "client")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dlopen")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "once_cell")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "dlib" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.68";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96565907687f7aceb35bc5fc03770a8a0471d82e479f25832f54a0e3f4b28446"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "AddEventListenerOptions")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "AngleInstancedArrays")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "BeforeUnloadEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "BinaryType")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Blob")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Clipboard")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "ClipboardEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "CompositionEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "CssStyleDeclaration")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "DataTransfer")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "DataTransferItem")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "DataTransferItemList")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Document")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "DomRect")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "DomRectReadOnly")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "DragEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Element")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Event")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "EventListener")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "EventListenerOptions")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "EventTarget")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ExtBlendMinmax")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ExtColorBufferFloat")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ExtColorBufferHalfFloat")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ExtDisjointTimerQuery")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ExtFragDepth")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ExtSRgb")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ExtShaderTextureLod")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ExtTextureFilterAnisotropic")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "File")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "FileList")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "FocusEvent")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Gpu")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuAdapter")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuAddressMode")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuAutoLayoutMode")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBindGroup")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBindGroupDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBindGroupEntry")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBindGroupLayout")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBindGroupLayoutDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBindGroupLayoutEntry")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBlendComponent")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBlendFactor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBlendOperation")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBlendState")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBuffer")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBufferBinding")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBufferBindingLayout")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBufferBindingType")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuBufferDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCanvasAlphaMode")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCanvasConfiguration")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCanvasContext")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuColorDict")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuColorTargetState")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCommandBuffer")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCommandBufferDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCommandEncoder")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCommandEncoderDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCompareFunction")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCompilationInfo")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCompilationMessage")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCompilationMessageType")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuComputePassDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuComputePassEncoder")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuComputePipeline")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuComputePipelineDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuCullMode")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuDepthStencilState")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuDevice")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuDeviceDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuDeviceLostInfo")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuDeviceLostReason")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuError")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuErrorFilter")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuExtent3dDict")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuFeatureName")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuFilterMode")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuFragmentState")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuFrontFace")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuImageCopyBuffer")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuImageCopyExternalImage")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuImageCopyTexture")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuImageCopyTextureTagged")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuImageDataLayout")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuIndexFormat")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuLoadOp")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuMipmapFilterMode")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuMultisampleState")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuObjectDescriptorBase")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuOrigin2dDict")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuOrigin3dDict")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuOutOfMemoryError")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuPipelineDescriptorBase")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuPipelineLayout")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuPipelineLayoutDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuPowerPreference")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuPrimitiveState")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuPrimitiveTopology")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuProgrammableStage")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuQuerySet")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuQuerySetDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuQueryType")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuQueue")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderBundle")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderBundleDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderBundleEncoder")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderBundleEncoderDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderPassColorAttachment")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderPassDepthStencilAttachment")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderPassDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderPassEncoder")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderPipeline")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRenderPipelineDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuRequestAdapterOptions")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuSampler")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuSamplerBindingLayout")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuSamplerBindingType")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuSamplerDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuShaderModule")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuShaderModuleDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuStencilFaceState")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuStencilOperation")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuStorageTextureAccess")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuStorageTextureBindingLayout")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuStoreOp")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuSupportedFeatures")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuSupportedLimits")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTexture")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTextureAspect")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTextureBindingLayout")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTextureDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTextureDimension")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTextureFormat")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTextureSampleType")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTextureView")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTextureViewDescriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuTextureViewDimension")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuUncapturedErrorEvent")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuUncapturedErrorEventInit")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuValidationError")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuVertexAttribute")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuVertexBufferLayout")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuVertexFormat")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuVertexState")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "GpuVertexStepMode")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "HtmlCanvasElement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "HtmlElement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "HtmlImageElement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "HtmlInputElement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "HtmlMediaElement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "HtmlVideoElement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "ImageBitmap")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "ImageBitmapRenderingContext")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "InputEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "KeyboardEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Location")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "MediaQueryList")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "MediaQueryListEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "MessageEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "MouseEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Navigator")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Node")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "NodeList")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "OesElementIndexUint")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "OesStandardDerivatives")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "OesTextureFloat")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "OesTextureFloatLinear")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "OesTextureHalfFloat")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "OesTextureHalfFloatLinear")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "OesVertexArrayObject")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "OffscreenCanvas")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "OvrMultiview2")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Performance")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "PerformanceTiming")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "PointerEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Storage")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Touch")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "TouchEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "TouchList")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "UiEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "VideoFrame")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGl2RenderingContext")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlActiveInfo")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlBuffer")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlFramebuffer")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlProgram")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlQuery")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlRenderbuffer")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlRenderingContext")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlSampler")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlShader")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlSync")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlTexture")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlTransformFeedback")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlUniformLocation")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebGlVertexArrayObject")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglColorBufferFloat")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglCompressedTextureAstc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglCompressedTextureEtc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglCompressedTextureEtc1")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglCompressedTexturePvrtc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglCompressedTextureS3tc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglCompressedTextureS3tcSrgb")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglDebugRendererInfo")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglDebugShaders")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglDepthTexture")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglDrawBuffers")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WebglLoseContext")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "WheelEvent")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Window")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Worker")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "WorkerGlobalScope")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "WorkerNavigator")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "console")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "gpu_map_mode")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-time."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "web-time";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa30049b1c872b72c89866d458eae9f20380ab280ffd1b1e18df2d3e2d98cfe0"; };
    dependencies = {
      ${ if false then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if false then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webbrowser."0.8.12" = overridableMkRustCrate (profileName: rec {
    name = "webbrowser";
    version = "0.8.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "82b2391658b02c27719fc5a0a73d6e696285138e8b12fba9d4baa70451023c71"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "haiku") then "home" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".home."0.5.9" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "android" then "jni" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.21.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "android" then "ndk_context" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "ios" then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "ios" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "url" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".weezl."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "weezl";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53a85b86a771b1c87058196170769dd264f66c0782acf1ae6cc51bfd64b39082"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu."0.15.1" = overridableMkRustCrate (profileName: rec {
    name = "wgpu";
    version = "0.15.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d745a1b6d91d85c33defbb29f0eee0450e1d2614d987e14bf6baf26009d132d7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "hal")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "webgl")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wgc")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wgsl")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "arrayvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "naga" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.11.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "profiling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.15" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.41" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wgc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.15.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (!(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "ios") && !(hostPlatform.parsed.kernel.name == "darwin") || !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.isWindows || hostPlatform.parsed.cpu.name == "wasm32") then "hal" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.15.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wgt" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.15.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.15.1" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-core";
    version = "0.15.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7131408d940e335792645a98f03639573b0480e9e2e7cddbbab74f7c6d9f3fff"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dx11")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dx12")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "emscripten")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "gles")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "metal")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "raw-window-handle")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "vulkan")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wgsl")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "arrayvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bit_vec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "codespan_reporting" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "fxhash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "naga" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.11.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "profiling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.15" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten") then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "hal" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.15.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wgt" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.15.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.15.4" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-hal";
    version = "0.15.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bdcf61a283adc744bb5453dd88ea91f3f86d5ca6b027661c6c73c7734ae0288b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "ash")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "bit-set")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "block")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dx11")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dx12")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dxc_shader_compiler")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "egl")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "emscripten")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "foreign-types")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "gles")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "glow")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "gpu-alloc")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "gpu-allocator")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "gpu-descriptor")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "hassle-rs")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "libloading")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "metal")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "native")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "range-alloc")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "renderdoc")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "renderdoc-sys")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "smallvec")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "vulkan")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "windows_rs")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "android" then "android_system_properties" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "arrayvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "ash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ash."0.37.3+1.3.251" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bit_set" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "block" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "core_graphics_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "native" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".d3d12."0.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "foreign_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "fxhash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "glow" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glow."0.12.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "gpu_alloc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.5.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "gpu_allocator" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-allocator."0.22.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "gpu_descriptor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.2.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "hassle_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hassle-rs."0.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten") then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (!(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.kernel.name == "emscripten") then "egl" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".khronos-egl."4.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (!(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.kernel.name == "emscripten") then "libloading" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "mtl" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".metal."0.24.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "naga" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.11.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "profiling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.15" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "range_alloc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "renderdoc_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".renderdoc-sys."0.7.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten") then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten") then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wgt" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.15.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-types";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "32444e121b0bd00cb02c0de32fde457a9491bd44e03e7a5db6df9b1da2f6f110"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu_glyph."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "wgpu_glyph";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e25440d5f32ec39de49c57c15c2d3f9133a7939b069b5ad07e5afd8b78fb8adc"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bytemuck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "glyph_brush" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush."0.7.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "wgpu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu."0.15.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".widestring."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "widestring";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c168940144dd21fd8046987c16a46a33d5fc84eec29ef9dcddc2ac9e31526b7c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".widestring."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "widestring";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17882f045410753661207383517a6f62ec3dbeb6a4ed2acce01f0728238d1983"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "basetsd")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "combaseapi")
      [ "consoleapi" ]
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3d11")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3d11_1")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3d11_2")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3d11sdklayers")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3d12")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3d12sdklayers")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3d12shader")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3dcommon")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "d3dcompiler")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dcomp")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dwrite")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dwrite_1")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dwrite_3")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dxgi1_2")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dxgi1_3")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dxgi1_4")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dxgi1_5")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dxgi1_6")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dxgidebug")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "dxgiformat")
      [ "errhandlingapi" ]
      [ "fileapi" ]
      [ "handleapi" ]
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "impl-debug")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "impl-default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "iphlpapi")
      [ "knownfolders" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "libloaderapi")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "memoryapi")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "minwinbase")
      [ "minwindef" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "ntdef")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "ntstatus")
      [ "objbase" ]
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "oleauto")
      [ "processenv" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "processthreadsapi")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "profileapi")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "sddl")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "securitybaseapi")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "shellapi")
      [ "shlobj" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "stringapiset")
      [ "synchapi" ]
      [ "sysinfoapi" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "tcpmib")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "unknwnbase")
      [ "winbase" ]
      [ "wincon" ]
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "windef")
      [ "winerror" ]
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "winnls")
      [ "winnt" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "winsock2")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "winuser")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "ws2def")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "ws2ipdef")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "ws2tcpip")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wtypes")
    ];
    dependencies = {
      ${ if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f29e6f9198ba0d26b4c9f07dbe6f9ed633e1f3d5b8b414090084349e46a52596"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".window_clipboard."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "window_clipboard";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "015dd4474dc6aa96fe19aae3a24587a088bd90331dba5a5cc60fb3a180234c4d"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isWindows then "clipboard_win" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clipboard-win."4.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "clipboard_macos" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clipboard_macos."0.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "redox") then "clipboard_wayland" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clipboard_wayland."0.2.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "redox") then "clipboard_x11" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clipboard_x11."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.57" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows."0.44.0" = overridableMkRustCrate (profileName: rec {
    name = "windows";
    version = "0.44.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e745dab35a0c4c77aa3ce42d595e13d2003d6902d6b08c9ef5fc326d08da12b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Foundation")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Graphics")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Graphics_Direct3D")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Graphics_Direct3D12")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Graphics_Dxgi")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Graphics_Dxgi_Common")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.42.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e686886bc078bc1b0b600cac0147aadb815089b6e4da64016cbd754b6342700f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Foundation")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Graphics")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Graphics_Gdi")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_Com")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_LibraryLoader")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_Ole")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Accessibility")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Input")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Input_KeyboardAndMouse")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_WindowsAndMessaging")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "implement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "windows-implement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "windows-interface")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "windows_implement" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-implement."0.48.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "windows_interface" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-interface."0.48.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-implement."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-implement";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e2ee588991b9e7e6c8338edf3333fbe4da35dc72092643958ebb43f0ab2c49c"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-interface."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-interface";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6fb8df20c9bcaa8ad6ab513f7b40104840c8867d5751126e4df3b08388d0cc7"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Devices")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Devices_HumanInterfaceDevice")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Foundation")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Globalization")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Graphics")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Graphics_Dwm")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Graphics_Gdi")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_Media")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_System")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_System_Com")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_System_Com_StructuredStorage")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_System_LibraryLoader")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_System_Ole")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_System_SystemInformation")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_System_SystemServices")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_System_Threading")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_System_WindowsProgramming")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_Accessibility")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_Controls")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_HiDpi")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_Input")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_Input_Ime")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_Input_KeyboardAndMouse")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_Input_Pointer")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_Input_Touch")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_Shell")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_TextServices")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "Win32_UI_WindowsAndMessaging")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.config == "aarch64-pc-windows-msvc" || hostPlatform.config == "aarch64-uwp-windows-msvc") then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.36.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.config == "i686-pc-windows-gnu" || hostPlatform.config == "i686-uwp-windows-gnu") then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.36.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.config == "i686-pc-windows-msvc" || hostPlatform.config == "i686-uwp-windows-msvc") then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.36.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.config == "x86_64-pc-windows-gnu" || hostPlatform.config == "x86_64-uwp-windows-gnu") then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.36.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.config == "x86_64-pc-windows-msvc" || hostPlatform.config == "x86_64-uwp-windows-msvc") then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.36.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.45.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Devices")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Devices_HumanInterfaceDevice")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Foundation")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Globalization")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Graphics")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Graphics_Dwm")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Graphics_Gdi")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Graphics_OpenGL")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_Media")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_Com")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_Com_StructuredStorage")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_LibraryLoader")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_Ole")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_SystemInformation")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_SystemServices")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_Threading")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_WindowsProgramming")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Accessibility")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Controls")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_HiDpi")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Input")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Input_Ime")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Input_KeyboardAndMouse")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Input_Pointer")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Input_Touch")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Shell")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_TextServices")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_WindowsAndMessaging")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.42.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_Globalization" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_NetworkManagement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_NetworkManagement_IpHelper")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_Networking")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_Networking_WinSock")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_Security")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_Storage")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_Storage_FileSystem")
      [ "Win32_System" ]
      [ "Win32_System_Com" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_Console")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_Diagnostics")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_Diagnostics_Debug")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_IO")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_LibraryLoader")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_Pipes")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_Threading")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_WindowsProgramming")
      [ "Win32_UI" ]
      [ "Win32_UI_Shell" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.52.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Wdk")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Wdk_Foundation")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Wdk_Storage")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Wdk_Storage_FileSystem")
      [ "Win32" ]
      [ "Win32_Foundation" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_NetworkManagement")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_NetworkManagement_IpHelper")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_Networking")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_Networking_WinSock")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_Security")
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_System_Com")
      [ "Win32_System_Console" ]
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_Diagnostics")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_Diagnostics_Debug")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_IO")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_LibraryLoader")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_Threading")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "Win32_System_WindowsProgramming")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "Win32_UI_Shell")
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.42.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.config == "aarch64-pc-windows-msvc" || hostPlatform.config == "aarch64-uwp-windows-msvc") then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.42.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.config == "i686-pc-windows-gnu" || hostPlatform.config == "i686-uwp-windows-gnu") then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.42.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.config == "i686-pc-windows-msvc" || hostPlatform.config == "i686-uwp-windows-msvc") then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.42.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.config == "x86_64-pc-windows-gnu" || hostPlatform.config == "x86_64-uwp-windows-gnu") then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.42.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.42.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && (hostPlatform.config == "x86_64-pc-windows-msvc" || hostPlatform.config == "x86_64-uwp-windows-msvc") then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.42.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "msvc" then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.3" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.52.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d380ba1dc7187569a8a9e91ed34b8ccfc33123bbacb8c0aed2d1ad7f3ef2dc5f"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.3" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.3" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.3" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.3" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.3" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.3" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "msvc" then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.3" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.52.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68e5dcfb9413f53afd9c8f86e56a7b4d86d9a2fa26090ea2dc9e40fba56c6ec6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.3" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.52.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8dab469ebbc45798319e69eebf92308e541ce46760b49b18c6b3fe5e8965b30f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.3" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.52.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2a4e9b6a7cac734a8b4138a4e1044eac3404d8326b6c0f939276560687a033fb"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.3" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.52.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "28b0ec9c422ca95ff34a78755cfa6ad4a51371da2a5ace67500cf7ca5f232c58"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.3" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.52.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "704131571ba93e89d7cd43482277d6632589b18ecf4468f591fbae0a8b101614"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.3" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.52.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "42079295511643151e98d61c38c0acc444e52dd42ab456f7ccfd5152e8ecf21c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.3" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.52.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0770833d60a970638e989b3fa9fd2bb1aaadcf88963d1659fd7d9990196ed2d6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winit."0.27.5" = overridableMkRustCrate (profileName: rec {
    name = "winit";
    version = "0.27.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb796d6fbd86b2fd896c9471e6f04d39d750076ebe5680a3958f00f5ab97657c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "mio")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "parking_lot")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "percent-encoding")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "sctk")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "sctk-adwaita")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland-client")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland-csd-adwaita")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland-dlopen")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "wayland-protocols")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "x11")
      (lib.optional (rootFeatures' ? "aphorme/iced-ui") "x11-dl")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "cocoa" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "core_graphics" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "darwin" then "dispatch" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "instant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "mio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.10" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.7.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "objc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "windows") then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "raw_window_handle_04" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "sctk_adwaita" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sctk-adwaita."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "sctk" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.16.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "wayland_protocols" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.29.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/iced-ui" && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "x11_dl" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.21.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winit."0.28.7" = overridableMkRustCrate (profileName: rec {
    name = "winit";
    version = "0.28.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9596d90b45384f5281384ab204224876e8e8bf7d58366d9b795ad99aa9894b94"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "mio")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "percent-encoding")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "sctk")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "sctk-adwaita")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland-client")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland-commons")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland-csd-adwaita")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland-dlopen")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "wayland-protocols")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "x11")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "x11-dl")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "android" then "android_activity" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android-activity."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "core_graphics" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "dispatch" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "instant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "mio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.10" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "objc2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc2."0.3.0-beta.3.patch-leaks.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "redox" then "orbclient" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".orbclient."0.3.47" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "raw_window_handle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.3.5" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "sctk_adwaita" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sctk-adwaita."0.5.4" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "sctk" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.16.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.91" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "wayland_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.29.5" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "wayland_commons" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.29.5" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "wayland_protocols" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.29.5" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.68" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "x11_dl" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.21.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "cfg_aliases" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" { profileName = "__noProfile"; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "wayland_scanner" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winnow."0.5.40" = overridableMkRustCrate (profileName: rec {
    name = "winnow";
    version = "0.5.40";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "alloc")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wio."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "wio";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d129932f4644ac2396cb456385cbf9e63b5b30c6e8dc4820bdca4eb082037a5"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/iced-ui" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.21.0" = overridableMkRustCrate (profileName: rec {
    name = "x11-dl";
    version = "2.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38735924fedd5314a6e548792904ed8c6de6636285cb9fec04d5b1db85c1516f"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "pkg_config" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11rb."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "x11rb";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8f25ead8c7e4cba123243a6367da5d3990e0d3affa708ea19dce96356bd9f1a"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") && !hostPlatform.isUnix then "gethostname" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gethostname."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "x11rb_protocol" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11rb-protocol."0.13.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11rb-protocol."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "x11rb-protocol";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e63e71c4b8bd9ffec2c963173a4dc4cbde9ee96961d4fcb4429db9929b606c34"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "xcursor";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a0ccd7b4a5345edfcd0c3535718a4e9ff7798ffc536bb5b5a0e26ff84732911"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xdg-home."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "xdg-home";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "21e5a325c3cb8398ad6cf859c1135b25dd29e186679cf2da7581d9679f63b38e"; };
    dependencies = {
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "xi-unicode";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a67300977d3dc3f8034dae89778f502b6ba20b269527b3223ba59c0cf393bb8a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xkeysym."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "xkeysym";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "054a8e68b76250b253f671d1268cb7f1ae089ec35e195b2efb2a4e9a836d0621"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.19" = overridableMkRustCrate (profileName: rec {
    name = "xml-rs";
    version = "0.8.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0fcb9cbac069e033553e8bb871be2fbdffcab578eb25bd0f7c508cedc6dcd75a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xmlparser."0.13.6" = overridableMkRustCrate (profileName: rec {
    name = "xmlparser";
    version = "0.13.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "66fee0b777b0f5ac1c69bb06d361268faafa61cd4682ae064a171c16c433e9e4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "default")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zbus."3.15.2" = overridableMkRustCrate (profileName: rec {
    name = "zbus";
    version = "3.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "675d170b632a6ad49804c8cf2105d7c31eddd3312555cffd4b740e08e97c25e6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "async-executor")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "async-fs")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "async-io")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "async-lock")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "async-task")
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "blocking")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_broadcast" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-broadcast."0.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_executor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-executor."1.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_fs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-fs."1.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.13.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_lock" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."2.8.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.parsed.kernel.name == "darwin" then "async_process" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-process."1.8.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_recursion" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-recursion."1.0.5" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_task" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-task."4.7.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.77" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "blocking" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blocking."1.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "byteorder" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "derivative" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "enumflags2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".enumflags2."0.7.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "event_listener" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_sink" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "futures_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "hex" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isUnix then "nix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.26.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "ordered_stream" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ordered-stream."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde_repr" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_repr."0.1.18" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "sha1" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "uds_windows" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uds_windows."1.1.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "xdg_home" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xdg-home."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zbus_macros" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zbus_macros."3.15.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zbus_names" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zbus_names."2.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zvariant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zvariant."3.15.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zbus_macros."3.15.2" = overridableMkRustCrate (profileName: rec {
    name = "zbus_macros";
    version = "3.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7131497b0f887e8061b430c530240063d33bf9455fa34438f388a245da69e0a5"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "regex" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zvariant_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zvariant_utils."1.0.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zbus_names."2.6.0" = overridableMkRustCrate (profileName: rec {
    name = "zbus_names";
    version = "2.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb80bb776dbda6e23d705cf0123c3b95df99c4ebeaec6c2599d4a5419902b4a9"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zvariant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zvariant."3.15.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.32" = overridableMkRustCrate (profileName: rec {
    name = "zerocopy";
    version = "0.7.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "74d4d3961e53fa4c9a25a8637fc2bfaf2595b3d3ae34875568a5cf64787716be"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui") "simd")
    ];
    dependencies = {
      ${ if false then "zerocopy_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.32" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.32" = overridableMkRustCrate (profileName: rec {
    name = "zerocopy-derive";
    version = "0.7.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ce1b18ccd8e73a9321186f97e46f9f04b778851177567b1975109d26a08d2a6"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" || rootFeatures' ? "aphorme/iced-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.51" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zune-inflate."0.2.54" = overridableMkRustCrate (profileName: rec {
    name = "zune-inflate";
    version = "0.2.54";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73ab332fe2f6680068f3582b16a24f90ad7096d5d39b974d1c0aff0125116f02"; };
    features = builtins.concatLists [
      [ "simd-adler32" ]
      [ "zlib" ]
    ];
    dependencies = {
      simd_adler32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zvariant."3.15.2" = overridableMkRustCrate (profileName: rec {
    name = "zvariant";
    version = "3.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4eef2be88ba09b358d3b58aca6e41cd853631d44787f319a1383ca83424fb2db"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui") "enumflags2")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "byteorder" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "enumflags2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".enumflags2."0.7.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.153" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.197" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zvariant_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zvariant_derive."3.15.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zvariant_derive."3.15.2" = overridableMkRustCrate (profileName: rec {
    name = "zvariant_derive";
    version = "3.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "37c24dc0bed72f5f90d1f8bb5b07228cbf63b3c6e9f82d82559d4bae666e7ed9"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "zvariant_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zvariant_utils."1.0.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zvariant_utils."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "zvariant_utils";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7234f0d811589db492d16893e3f21e8e2fd282e6d01b0cddee310322062cc200"; };
    dependencies = {
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.78" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.35" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aphorme/default" || rootFeatures' ? "aphorme/egui-ui" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
}
